Search.setIndex({"alltitles": {"(Maximum inner-product search)": [[118, "maximum-inner-product-search"]], "0. Installation": [[115, "installation"], [116, "installation"], [128, "installation"], [129, "installation"], [130, "installation"]], "0. Preparation": [[119, "preparation"], [125, "preparation"], [134, "preparation"], [135, "preparation"], [136, "preparation"]], "0. Setup": [[132, "setup"]], "1. BAAI General Embedding": [[114, "baai-general-embedding"]], "1. BGE-M3 structure": [[116, "bge-m3-structure"]], "1. Background": [[113, "background"]], "1. Data": [[134, "data"], [135, "data"], [136, "data"]], "1. Dataset": [[132, "dataset"]], "1. Datasets": [[130, "datasets"]], "1. Embedding": [[112, null]], "1. Encode sentences": [[115, "encode-sentences"]], "1. Flat Index": [[125, "flat-index"]], "1. IndexFlat*": [[123, "indexflat"]], "1. Installation": [[122, "installation"]], "1. Intro": [[128, "intro"]], "1. Jaccard Similarity": [[118, "jaccard-similarity"]], "1. Recall": [[119, "recall"]], "1. Run the Evaluation": [[129, "run-the-evaluation"]], "1. Scalar Quantizer": [[124, "scalar-quantizer"]], "2. BGE Series Models": [[114, "bge-series-models"]], "2. Comparison": [[115, "comparison"]], "2. Data Preparation": [[122, "data-preparation"]], "2. Embedding": [[132, "embedding"]], "2. Euclidean Distance": [[118, "euclidean-distance"]], "2. IVF Index": [[125, "ivf-index"]], "2. IndexIVF*": [[123, "indexivf"]], "2. Indexing": [[134, "indexing"], [135, "indexing"], [136, "indexing"]], "2. MRR": [[119, "mrr"]], "2. Metrics": [[117, null]], "2. Model": [[130, "model"]], "2. Multi-Functionality": [[116, "multi-functionality"]], "2. Product Quantizer": [[124, "product-quantizer"]], "2. Submit to MTEB Leaderboard": [[129, "submit-to-mteb-leaderboard"]], "2.1 BGE": [[114, "bge"]], "2.1 Dense Retrieval": [[116, "dense-retrieval"]], "2.2 BGE v1.5": [[114, "bge-v1-5"]], "2.2 Sparse Retrieval": [[116, "sparse-retrieval"]], "2.3 LLM-Embedder": [[114, "llm-embedder"]], "2.3 Multi-Vector": [[116, "multi-vector"]], "2.4 BGE M3": [[114, "bge-m3"]], "2.4 Hybrid Ranking": [[116, "hybrid-ranking"]], "3. Cosine Similarity": [[118, "cosine-similarity"]], "3. Create Index on CPU": [[122, "create-index-on-cpu"]], "3. Evaluate": [[130, "evaluate"]], "3. HNSW Index": [[125, "hnsw-index"]], "3. IndexHNSW*": [[123, "indexhnsw"]], "3. Indexing": [[120, null], [132, "indexing"]], "3. Partially Evaluate": [[129, "partially-evaluate"]], "3. Retreive and Generate": [[135, "retreive-and-generate"]], "3. Retrieve and Generate": [[134, "retrieve-and-generate"], [136, "retrieve-and-generate"]], "3. nDCG": [[119, "ndcg"]], "3.1 Naive Approach": [[118, "naive-approach"]], "3.2 PyTorch Implementation": [[118, "pytorch-implementation"]], "3.3 PyTorch Function Call": [[118, "pytorch-function-call"]], "4. Build GPU Index and Search": [[122, "build-gpu-index-and-search"]], "4. Evaluation": [[126, null]], "4. Future Work": [[129, "future-work"]], "4. IndexLSH": [[123, "indexlsh"]], "4. Inner Product/Dot Product": [[118, "inner-product-dot-product"]], "4. LSH": [[125, "lsh"]], "4. Precision": [[119, "precision"]], "4. Retrieval": [[132, "retrieval"]], "4. Submit to MTEB Leaderboard": [[130, "submit-to-mteb-leaderboard"]], "5. Examples": [[118, "examples"]], "5. MAP": [[119, "map"]], "5. Reranking": [[131, null], [132, "reranking"]], "5. Results": [[122, "results"]], "5. Scalar Quantizer Index": [[125, "scalar-quantizer-index"]], "5.1 Recall": [[127, "recall"]], "5.2 MRR": [[127, "mrr"]], "5.3 nDCG": [[127, "ndcg"]], "6. Evaluate": [[132, "evaluate"]], "6. Product Quantizer Index": [[125, "product-quantizer-index"]], "6. RAG": [[133, null]], "6.1 Recall": [[132, "recall"]], "6.2 MRR": [[132, "mrr"]], "6.3 nDCG": [[132, "ndcg"]], "AIR-Bench": [[24, null]], "AbsArguments": [[9, null], [15, null]], "AbsDataset": [[10, null], [16, null]], "AbsEmbedder": [[21, null]], "AbsEmbedderCollator": [[10, "absembeddercollator"]], "AbsEmbedderModel": [[11, "absembeddermodel"]], "AbsEmbedderSameDatasetCollator": [[10, "absembeddersamedatasetcollator"], [59, "absembeddersamedatasetcollator"]], "AbsEmbedderSameDatasetTrainDataset": [[10, "absembeddersamedatasettraindataset"]], "AbsEmbedderTrainDataset": [[10, "absembeddertraindataset"]], "AbsEmbedderTrainer": [[12, "absembeddertrainer"], [13, "absembeddertrainer"]], "AbsLLMRerankerCollator": [[16, "absllmrerankercollator"]], "AbsLLMRerankerTrainDataset": [[16, "absllmrerankertraindataset"]], "AbsModeling": [[11, null], [17, null]], "AbsReranker": [[22, null]], "AbsRerankerCollator": [[16, "absrerankercollator"]], "AbsRerankerModel": [[17, "absrerankermodel"]], "AbsRerankerTrainDataset": [[16, "absrerankertraindataset"]], "AbsRerankerTrainer": [[18, "absrerankertrainer"], [19, "absrerankertrainer"]], "AbsRunner": [[12, null], [18, null]], "AbsTrainer": [[13, null], [19, null]], "Abstract Class": [[0, null]], "All Available GPUs": [[122, "all-available-gpus"]], "Arguments": [[2, null], [53, null], [58, null], [69, null], [76, null], [81, null]], "BAAI General Embedding": [[111, null]], "BEIR": [[27, null]], "BGE": [[109, "bge"], [113, "bge"]], "BGE Explanation": [[115, null]], "BGE Series": [[114, null]], "BGE-M3": [[107, null], [116, null]], "BGE-Reranker": [[108, null]], "BGE-en-icl": [[106, null]], "BGE-v1": [[109, null]], "BGE-v1.5": [[109, "bge-v1-5"]], "Base": [[52, null], [64, null], [75, null], [86, null]], "BaseEmbedder": [[93, null], [96, null]], "BaseLLMReranker": [[98, null]], "BaseReranker": [[101, null]], "C-MTEB": [[130, null]], "Choosing Index": [[125, null]], "Commercial Models": [[113, "commercial-models"]], "Dataset": [[59, null], [125, "dataset"]], "Decoder Only": [[51, null], [74, null]], "DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, "decoderonlyembeddericlsamedatasettraindataset"]], "Embedder": [[8, null], [50, null], [95, null]], "EmbedderOutput": [[11, "embedderoutput"]], "EmbedderTrainerCallbackForDataRefresh": [[10, "embeddertrainercallbackfordatarefresh"]], "Encoder Only": [[63, null], [85, null]], "EncoderOnlyEmbedderM3Model": [[70, "encoderonlyembedderm3model"]], "EncoderOnlyEmbedderM3ModelForInference": [[70, "encoderonlyembedderm3modelforinference"]], "EvalDenseRetriever": [[6, "evaldenseretriever"]], "EvalReranker": [[6, "evalreranker"]], "EvalRetriever": [[6, "evalretriever"]], "Evaluation": [[1, null], [23, null], [127, null]], "Evaluation Metrics": [[119, null]], "Evaluator": [[4, null]], "Example": [[123, "example"], [123, "id3"], [123, "id7"]], "Faiss GPU": [[122, null]], "Faiss Indexes": [[123, null]], "Faiss Quantizers": [[124, null]], "Finetune": [[7, null], [49, null]], "FlagAutoModel": [[91, null]], "FlagAutoReranker": [[92, null]], "Get Embedding": [[113, "get-embedding"]], "Helper function": [[125, "helper-function"]], "ICL": [[57, null]], "ICLLLMEmbedder": [[94, null]], "Indexing Using Faiss": [[121, null]], "Inference": [[20, null], [90, null]], "Install from sources:": [[104, "install-from-sources"]], "Installation": [[104, null]], "Intro": [[123, "intro"], [123, "id1"], [123, "id4"]], "Intro to Embedding": [[113, null]], "Introduction": [[110, null]], "LayerWiseLLMReranker": [[99, null]], "Layerwise": [[80, null]], "LightweightLLMReranker": [[100, null]], "M3": [[68, null]], "M3Embedder": [[97, null]], "MIRACL": [[32, null]], "MKQA": [[35, null]], "MLDR": [[39, null]], "MSMARCO": [[42, null]], "MTEB": [[45, null], [128, null]], "MTEB Leaderboard": [[129, null]], "Methods": [[3, "methods"], [10, "methods"], [10, "id1"], [10, "id2"], [11, "methods"], [12, "methods"], [13, "methods"], [16, "methods"], [17, "methods"], [18, "methods"], [19, "methods"], [21, "methods"], [22, "methods"], [33, "methods"], [36, "methods"], [40, "methods"], [43, "methods"], [54, "methods"], [59, "methods"], [60, "methods"], [65, "methods"], [70, "methods"], [77, "methods"], [82, "methods"], [87, "methods"], [91, "methods"], [92, "methods"], [93, "methods"], [94, "methods"], [96, "methods"], [97, "methods"], [98, "methods"], [99, "methods"], [100, "methods"], [101, "methods"]], "Modeling": [[54, null], [60, null], [65, null], [70, null], [77, null], [82, null], [87, null]], "Multiple GPUs": [[122, "multiple-gpus"]], "Open-source Models": [[113, "open-source-models"]], "OpenAI": [[113, "openai"]], "Option 1:": [[122, "option-1"]], "Option 2:": [[122, "option-2"]], "Packages": [[125, "packages"]], "Preparation": [[123, "preparation"], [124, "preparation"]], "Product Quantizer": [[124, "id2"]], "Product Quantizer IVF Index": [[124, "product-quantizer-ivf-index"]], "Product Quantizer Index": [[124, "product-quantizer-index"]], "Quick Start": [[105, null]], "RAG with LangChain": [[135, null]], "RAG with LlamaIndex": [[136, null]], "Relationship with Cosine similarity": [[118, "relationship-with-cosine-similarity"]], "Reranker": [[14, null], [73, null], [102, null], [132, null]], "RerankerOutput": [[17, "rerankeroutput"]], "Runner": [[55, null], [61, null], [66, null], [71, null], [78, null], [83, null], [88, null]], "Scalar Quantizer": [[124, "id1"]], "Scalar Quantizer Index": [[124, "scalar-quantizer-index"]], "Sentence Transformers": [[113, "sentence-transformers"]], "Shortage": [[123, "shortage"], [123, "id6"]], "Similarity": [[118, null]], "Simple RAG From Scratch": [[134, null]], "Single GPU:": [[122, "single-gpu"]], "Step 0: Preparation": [[105, "step-0-preparation"]], "Step 0: Setup": [[121, "step-0-setup"], [127, "step-0-setup"]], "Step 1: Dataset": [[121, "step-1-dataset"]], "Step 1: Load Dataset": [[127, "step-1-load-dataset"]], "Step 1: Text -> Embedding": [[105, "step-1-text-embedding"]], "Step 2: Calculate Similarity": [[105, "step-2-calculate-similarity"]], "Step 2: Embedding": [[127, "step-2-embedding"]], "Step 2: Text Embedding": [[121, "step-2-text-embedding"]], "Step 3.5 (Optional): Saving Faiss index": [[121, "step-3-5-optional-saving-faiss-index"]], "Step 3: Indexing": [[121, "step-3-indexing"], [127, "step-3-indexing"]], "Step 3: Ranking": [[105, "step-3-ranking"]], "Step 4: Evaluate": [[105, "step-4-evaluate"]], "Step 4: Find answers to the query": [[121, "step-4-find-answers-to-the-query"]], "Step 4: Retrieval": [[127, "step-4-retrieval"]], "Step 5: Evaluate": [[127, "step-5-evaluate"]], "Tradeoff": [[123, "tradeoff"], [123, "id2"], [123, "id5"]], "Trainer": [[56, null], [62, null], [67, null], [72, null], [79, null], [84, null], [89, null]], "Using pip:": [[104, "using-pip"]], "Voyage AI": [[113, "voyage-ai"]], "arguments": [[25, null], [28, null], [46, null]], "data loader": [[29, null]], "data_loader": [[33, null], [36, null], [40, null], [43, null]], "dataset loader": [[3, null]], "evaluator": [[30, null], [37, null]], "faiss-cpu": [[121, "faiss-cpu"]], "faiss-gpu on Linux (x86_64)": [[121, "faiss-gpu-on-linux-x86-64"]], "runner": [[5, null], [26, null], [31, null], [34, null], [38, null], [41, null], [44, null], [47, null]], "searcher": [[6, null], [48, null]]}, "docnames": ["API/abc", "API/abc/evaluation", "API/abc/evaluation/arguments", "API/abc/evaluation/data_loader", "API/abc/evaluation/evaluator", "API/abc/evaluation/runner", "API/abc/evaluation/searcher", "API/abc/finetune", "API/abc/finetune/embedder", "API/abc/finetune/embedder/AbsArguments", "API/abc/finetune/embedder/AbsDataset", "API/abc/finetune/embedder/AbsModeling", "API/abc/finetune/embedder/AbsRunner", "API/abc/finetune/embedder/AbsTrainer", "API/abc/finetune/reranker", "API/abc/finetune/reranker/AbsArguments", "API/abc/finetune/reranker/AbsDataset", "API/abc/finetune/reranker/AbsModeling", "API/abc/finetune/reranker/AbsRunner", "API/abc/finetune/reranker/AbsTrainer", "API/abc/inference", "API/abc/inference/AbsEmbedder", "API/abc/inference/AbsReranker", "API/evaluation", "API/evaluation/airbench", "API/evaluation/airbench/arguments", "API/evaluation/airbench/runner", "API/evaluation/beir", "API/evaluation/beir/arguments", "API/evaluation/beir/data_loader", "API/evaluation/beir/evaluator", "API/evaluation/beir/runner", "API/evaluation/miracl", "API/evaluation/miracl/data_loader", "API/evaluation/miracl/runner", "API/evaluation/mkqa", "API/evaluation/mkqa/data_loader", "API/evaluation/mkqa/evaluator", "API/evaluation/mkqa/runner", "API/evaluation/mldr", "API/evaluation/mldr/data_loader", "API/evaluation/mldr/runner", "API/evaluation/msmarco", "API/evaluation/msmarco/data_loader", "API/evaluation/msmarco/runner", "API/evaluation/mteb", "API/evaluation/mteb/arguments", "API/evaluation/mteb/runner", "API/evaluation/mteb/searcher", "API/finetune", "API/finetune/embedder", "API/finetune/embedder/decoder_only", "API/finetune/embedder/decoder_only/base", "API/finetune/embedder/decoder_only/base/arguments", "API/finetune/embedder/decoder_only/base/modeling", "API/finetune/embedder/decoder_only/base/runner", "API/finetune/embedder/decoder_only/base/trainer", "API/finetune/embedder/decoder_only/icl", "API/finetune/embedder/decoder_only/icl/arguments", "API/finetune/embedder/decoder_only/icl/dataset", "API/finetune/embedder/decoder_only/icl/modeling", "API/finetune/embedder/decoder_only/icl/runner", "API/finetune/embedder/decoder_only/icl/trainer", "API/finetune/embedder/encoder_only", "API/finetune/embedder/encoder_only/base", "API/finetune/embedder/encoder_only/base/modeling", "API/finetune/embedder/encoder_only/base/runner", "API/finetune/embedder/encoder_only/base/trainer", "API/finetune/embedder/encoder_only/m3", "API/finetune/embedder/encoder_only/m3/arguments", "API/finetune/embedder/encoder_only/m3/modeling", "API/finetune/embedder/encoder_only/m3/runner", "API/finetune/embedder/encoder_only/m3/trainer", "API/finetune/reranker", "API/finetune/reranker/decoder_only", "API/finetune/reranker/decoder_only/base", "API/finetune/reranker/decoder_only/base/arguments", "API/finetune/reranker/decoder_only/base/modeling", "API/finetune/reranker/decoder_only/base/runner", "API/finetune/reranker/decoder_only/base/trainer", "API/finetune/reranker/decoder_only/layerwise", "API/finetune/reranker/decoder_only/layerwise/arguments", "API/finetune/reranker/decoder_only/layerwise/modeling", "API/finetune/reranker/decoder_only/layerwise/runner", "API/finetune/reranker/decoder_only/layerwise/trainer", "API/finetune/reranker/encoder_only", "API/finetune/reranker/encoder_only/base", "API/finetune/reranker/encoder_only/base/modeling", "API/finetune/reranker/encoder_only/base/runner", "API/finetune/reranker/encoder_only/base/trainer", "API/inference", "API/inference/FlagAutoModel", "API/inference/FlagAutoReranker", "API/inference/embedder/decoder_only/BaseLLMEmbedder", "API/inference/embedder/decoder_only/ICLLLMEmbedder", "API/inference/embedder/embedder", "API/inference/embedder/encoder_only/BaseEmbedder", "API/inference/embedder/encoder_only/M3Embedder", "API/inference/reranker/decoder_only/BaseLLMReranker", "API/inference/reranker/decoder_only/LayerWiseLLMReranker", "API/inference/reranker/decoder_only/LightweightLLMReranker", "API/inference/reranker/encoder_only/BaseReranker", "API/inference/reranker/reranker", "C-MTEB", "Introduction/installation", "Introduction/quick_start", "bge/bge_icl", "bge/bge_m3", "bge/bge_reranker", "bge/bge_v1", "bge/introduction", "index", "tutorial/1_Embedding", "tutorial/1_Embedding/1.1.1", "tutorial/1_Embedding/1.2.1", "tutorial/1_Embedding/1.2.2", "tutorial/1_Embedding/1.2.3", "tutorial/2_Metrics", "tutorial/2_Metrics/2.1", "tutorial/2_Metrics/2.2", "tutorial/3_Indexing", "tutorial/3_Indexing/3.1.1", "tutorial/3_Indexing/3.1.2", "tutorial/3_Indexing/3.1.3", "tutorial/3_Indexing/3.1.4", "tutorial/3_Indexing/3.1.5", "tutorial/4_Evaluation", "tutorial/4_Evaluation/4.1.1", "tutorial/4_Evaluation/4.2.1", "tutorial/4_Evaluation/4.2.2", "tutorial/4_Evaluation/4.3.1", "tutorial/5_Reranking", "tutorial/5_Reranking/5.1", "tutorial/6_RAG", "tutorial/6_RAG/6.1", "tutorial/6_RAG/6.2", "tutorial/6_RAG/6.3"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["API/abc.rst", "API/abc/evaluation.rst", "API/abc/evaluation/arguments.rst", "API/abc/evaluation/data_loader.rst", "API/abc/evaluation/evaluator.rst", "API/abc/evaluation/runner.rst", "API/abc/evaluation/searcher.rst", "API/abc/finetune.rst", "API/abc/finetune/embedder.rst", "API/abc/finetune/embedder/AbsArguments.rst", "API/abc/finetune/embedder/AbsDataset.rst", "API/abc/finetune/embedder/AbsModeling.rst", "API/abc/finetune/embedder/AbsRunner.rst", "API/abc/finetune/embedder/AbsTrainer.rst", "API/abc/finetune/reranker.rst", "API/abc/finetune/reranker/AbsArguments.rst", "API/abc/finetune/reranker/AbsDataset.rst", "API/abc/finetune/reranker/AbsModeling.rst", "API/abc/finetune/reranker/AbsRunner.rst", "API/abc/finetune/reranker/AbsTrainer.rst", "API/abc/inference.rst", "API/abc/inference/AbsEmbedder.rst", "API/abc/inference/AbsReranker.rst", "API/evaluation.rst", "API/evaluation/airbench.rst", "API/evaluation/airbench/arguments.rst", "API/evaluation/airbench/runner.rst", "API/evaluation/beir.rst", "API/evaluation/beir/arguments.rst", "API/evaluation/beir/data_loader.rst", "API/evaluation/beir/evaluator.rst", "API/evaluation/beir/runner.rst", "API/evaluation/miracl.rst", "API/evaluation/miracl/data_loader.rst", "API/evaluation/miracl/runner.rst", "API/evaluation/mkqa.rst", "API/evaluation/mkqa/data_loader.rst", "API/evaluation/mkqa/evaluator.rst", "API/evaluation/mkqa/runner.rst", "API/evaluation/mldr.rst", "API/evaluation/mldr/data_loader.rst", "API/evaluation/mldr/runner.rst", "API/evaluation/msmarco.rst", "API/evaluation/msmarco/data_loader.rst", "API/evaluation/msmarco/runner.rst", "API/evaluation/mteb.rst", "API/evaluation/mteb/arguments.rst", "API/evaluation/mteb/runner.rst", "API/evaluation/mteb/searcher.rst", "API/finetune.rst", "API/finetune/embedder.rst", "API/finetune/embedder/decoder_only.rst", "API/finetune/embedder/decoder_only/base.rst", "API/finetune/embedder/decoder_only/base/arguments.rst", "API/finetune/embedder/decoder_only/base/modeling.rst", "API/finetune/embedder/decoder_only/base/runner.rst", "API/finetune/embedder/decoder_only/base/trainer.rst", "API/finetune/embedder/decoder_only/icl.rst", "API/finetune/embedder/decoder_only/icl/arguments.rst", "API/finetune/embedder/decoder_only/icl/dataset.rst", "API/finetune/embedder/decoder_only/icl/modeling.rst", "API/finetune/embedder/decoder_only/icl/runner.rst", "API/finetune/embedder/decoder_only/icl/trainer.rst", "API/finetune/embedder/encoder_only.rst", "API/finetune/embedder/encoder_only/base.rst", "API/finetune/embedder/encoder_only/base/modeling.rst", "API/finetune/embedder/encoder_only/base/runner.rst", "API/finetune/embedder/encoder_only/base/trainer.rst", "API/finetune/embedder/encoder_only/m3.rst", "API/finetune/embedder/encoder_only/m3/arguments.rst", "API/finetune/embedder/encoder_only/m3/modeling.rst", "API/finetune/embedder/encoder_only/m3/runner.rst", "API/finetune/embedder/encoder_only/m3/trainer.rst", "API/finetune/reranker.rst", "API/finetune/reranker/decoder_only.rst", "API/finetune/reranker/decoder_only/base.rst", "API/finetune/reranker/decoder_only/base/arguments.rst", "API/finetune/reranker/decoder_only/base/modeling.rst", "API/finetune/reranker/decoder_only/base/runner.rst", "API/finetune/reranker/decoder_only/base/trainer.rst", "API/finetune/reranker/decoder_only/layerwise.rst", "API/finetune/reranker/decoder_only/layerwise/arguments.rst", "API/finetune/reranker/decoder_only/layerwise/modeling.rst", "API/finetune/reranker/decoder_only/layerwise/runner.rst", "API/finetune/reranker/decoder_only/layerwise/trainer.rst", "API/finetune/reranker/encoder_only.rst", "API/finetune/reranker/encoder_only/base.rst", "API/finetune/reranker/encoder_only/base/modeling.rst", "API/finetune/reranker/encoder_only/base/runner.rst", "API/finetune/reranker/encoder_only/base/trainer.rst", "API/inference.rst", "API/inference/FlagAutoModel.rst", "API/inference/FlagAutoReranker.rst", "API/inference/embedder/decoder_only/BaseLLMEmbedder.rst", "API/inference/embedder/decoder_only/ICLLLMEmbedder.rst", "API/inference/embedder/embedder.rst", "API/inference/embedder/encoder_only/BaseEmbedder.rst", "API/inference/embedder/encoder_only/M3Embedder.rst", "API/inference/reranker/decoder_only/BaseLLMReranker.rst", "API/inference/reranker/decoder_only/LayerWiseLLMReranker.rst", "API/inference/reranker/decoder_only/LightweightLLMReranker.rst", "API/inference/reranker/encoder_only/BaseReranker.rst", "API/inference/reranker/reranker.rst", "C-MTEB.rst", "Introduction/installation.rst", "Introduction/quick_start.ipynb", "bge/bge_icl.rst", "bge/bge_m3.rst", "bge/bge_reranker.rst", "bge/bge_v1.rst", "bge/introduction.rst", "index.rst", "tutorial/1_Embedding.rst", "tutorial/1_Embedding/1.1.1.ipynb", "tutorial/1_Embedding/1.2.1.ipynb", "tutorial/1_Embedding/1.2.2.ipynb", "tutorial/1_Embedding/1.2.3.ipynb", "tutorial/2_Metrics.rst", "tutorial/2_Metrics/2.1.ipynb", "tutorial/2_Metrics/2.2.ipynb", "tutorial/3_Indexing.rst", "tutorial/3_Indexing/3.1.1.ipynb", "tutorial/3_Indexing/3.1.2.ipynb", "tutorial/3_Indexing/3.1.3.ipynb", "tutorial/3_Indexing/3.1.4.ipynb", "tutorial/3_Indexing/3.1.5.ipynb", "tutorial/4_Evaluation.rst", "tutorial/4_Evaluation/4.1.1.ipynb", "tutorial/4_Evaluation/4.2.1.ipynb", "tutorial/4_Evaluation/4.2.2.ipynb", "tutorial/4_Evaluation/4.3.1.ipynb", "tutorial/5_Reranking.rst", "tutorial/5_Reranking/5.1.ipynb", "tutorial/6_RAG.rst", "tutorial/6_RAG/6.1.ipynb", "tutorial/6_RAG/6.2.ipynb", "tutorial/6_RAG/6.3.ipynb"], "indexentries": {"_colbert_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._colbert_embedding", false]], "_compute_cross_device_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_cross_device_neg_loss", false]], "_compute_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_in_batch_neg_loss", false]], "_compute_no_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_no_in_batch_neg_loss", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._compute_similarity", false]], "_concatenate_results_from_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._concatenate_results_from_multi_process", false]], "_create_batch_data() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._create_batch_data", false]], "_create_batch_data() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlsamedatasettraindataset method)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset._create_batch_data", false]], "_dense_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._dense_embedding", false]], "_dist_gather_tensor() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._dist_gather_tensor", false]], "_encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._encode", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._encode_multi_process_worker", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker._encode_multi_process_worker", false]], "_get_file_batch_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset static method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_file_batch_size", false]], "_get_queries_attention_mask() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._get_queries_attention_mask", false]], "_get_train_group_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_train_group_size", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._load_dataset", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._sentence_embedding", false]], "_shuffle_text() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._shuffle_text", false]], "_shuffle_text() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._shuffle_text", false]], "_sparse_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._sparse_embedding", false]], "absembedder (class in flagembedding.abc.inference)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder", false]], "absembeddercollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderCollator", false]], "absembedderdataarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderDataArguments", false]], "absembeddermodel (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel", false]], "absembeddermodelarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModelArguments", false]], "absembedderrunner (class in flagembedding.abc.finetune.embedder)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner", false]], "absembeddersamedatasetcollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasetcollator (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasettraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset", false]], "absembeddertraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset", false]], "absembeddertrainer (class in flagembedding.abc.finetune.embedder)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer", false]], "absllmrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerCollator", false]], "absllmrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerTrainDataset", false]], "absreranker (class in flagembedding.abc.inference)": [[22, "FlagEmbedding.abc.inference.AbsReranker", false]], "absrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerCollator", false]], "absrerankerdataarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerDataArguments", false]], "absrerankermodel (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel", false]], "absrerankermodelarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModelArguments", false]], "absrerankerrunner (class in flagembedding.abc.finetune.reranker)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner", false]], "absrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset", false]], "absrerankertrainer (class in flagembedding.abc.finetune.reranker)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer", false]], "baseembedder (class in flagembedding.inference.embedder.encoder_only.base)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder", false]], "basellmembedder (class in flagembedding.inference.embedder.decoder_only.base)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder", false]], "basellmreranker (class in flagembedding.inference.reranker.decoder_only.base)": [[98, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker", false]], "basereranker (class in flagembedding.inference.reranker.encoder_only.base)": [[101, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker", false]], "bidecoderonlyembeddericlmodel (class in flagembedding.finetune.embedder.decoder_only.icl)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel", false]], "bidecoderonlyembeddermodel (class in flagembedding.finetune.embedder.decoder_only.base)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel", false]], "biencoderonlyembeddermodel (class in flagembedding.finetune.embedder.encoder_only.base)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel", false]], "colbert_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.colbert_score", false]], "compute_colbert_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_colbert_score", false]], "compute_dense_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_dense_score", false]], "compute_lexical_matching_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_lexical_matching_score", false]], "compute_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_local_score", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddertrainer method)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankertrainer method)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_loss", false]], "compute_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_score", false]], "compute_score() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_score", false]], "compute_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score", false]], "compute_score_multi_process() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_multi_process", false]], "compute_score_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_single_device", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.base.basellmreranker)": [[98, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.layerwise.layerwisellmreranker)": [[99, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.lightweight.lightweightllmreranker)": [[100, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.encoder_only.base.basereranker)": [[101, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker.compute_score_single_gpu", false]], "compute_score_single_gpu() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score_single_gpu", false]], "compute_sparse_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_sparse_score", false]], "convert_id_to_token() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.convert_id_to_token", false]], "create_one_example() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset.create_one_example", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.base)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel", false]], "crossencodermodel (class in flagembedding.finetune.reranker.encoder_only.base)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel", false]], "decoderonlyembeddericldataarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLDataArguments", false]], "decoderonlyembeddericlmodelarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLModelArguments", false]], "decoderonlyembeddericlrunner (class in flagembedding.finetune.embedder.decoder_only.icl)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner", false]], "decoderonlyembeddericlsamedatasettraindataset (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset", false]], "decoderonlyembeddericltrainer (class in flagembedding.finetune.embedder.decoder_only.icl)": [[62, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLTrainer", false]], "decoderonlyembeddermodelarguments (class in flagembedding.finetune.embedder.decoder_only.base)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderModelArguments", false]], "decoderonlyembedderrunner (class in flagembedding.finetune.embedder.decoder_only.base)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner", false]], "decoderonlyembeddertrainer (class in flagembedding.finetune.embedder.decoder_only.base)": [[79, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderTrainer", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.base)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.base)": [[56, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerTrainer", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[84, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerTrainer", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.base.basellmembedder attribute)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder attribute)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.base.baseembedder attribute)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.m3.m3embedder attribute)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.DEFAULT_POOLING_METHOD", false]], "distill_loss() (flagembedding.abc.finetune.embedder.absembeddermodel static method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.distill_loss", false]], "embedderoutput (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.EmbedderOutput", false]], "embeddertrainercallbackfordatarefresh (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh", false]], "enable_input_require_grads() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.enable_input_require_grads", false]], "encode() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.encode", false]], "encode() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.encode", false]], "encode() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.base.crossdecodermodel method)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.encoder_only.base.crossencodermodel method)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode", false]], "encode_corpus() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_corpus", false]], "encode_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_multi_process", false]], "encode_multi_process() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.encode_multi_process", false]], "encode_queries() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_queries", false]], "encode_queries_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries_single_device", false]], "encode_single_device() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[93, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_single_device", false]], "encoderonlyembedderm3model (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model", false]], "encoderonlyembedderm3modelarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelArguments", false]], "encoderonlyembedderm3modelforinference (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference", false]], "encoderonlyembedderm3runner (class in flagembedding.finetune.embedder.encoder_only.m3)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner", false]], "encoderonlyembedderm3trainer (class in flagembedding.finetune.embedder.encoder_only.m3)": [[72, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Trainer", false]], "encoderonlyembedderm3trainingarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3TrainingArguments", false]], "encoderonlyembedderrunner (class in flagembedding.finetune.embedder.encoder_only.base)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner", false]], "encoderonlyembeddertrainer (class in flagembedding.finetune.embedder.encoder_only.base)": [[67, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderTrainer", false]], "encoderonlyrerankerrunner (class in flagembedding.finetune.reranker.encoder_only.base)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner", false]], "encoderonlyrerankertrainer (class in flagembedding.finetune.reranker.encoder_only.base)": [[89, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerTrainer", false]], "ensemble_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.ensemble_score", false]], "flagautomodel (class in flagembedding.inference)": [[91, "FlagEmbedding.inference.FlagAutoModel", false]], "flagautoreranker (class in flagembedding.inference)": [[92, "FlagEmbedding.inference.FlagAutoReranker", false]], "forward() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.forward", false]], "forward() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3modelforinference method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference.forward", false]], "forward() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.forward", false]], "from_finetuned() (flagembedding.inference.flagautomodel class method)": [[91, "FlagEmbedding.inference.FlagAutoModel.from_finetuned", false]], "from_finetuned() (flagembedding.inference.flagautoreranker class method)": [[92, "FlagEmbedding.inference.FlagAutoReranker.from_finetuned", false]], "get_detailed_example() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder static method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.get_detailed_example", false]], "get_detailed_inputs() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_inputs", false]], "get_detailed_instruct() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_detailed_instruct", false]], "get_detailed_instruct() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_instruct", false]], "get_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.get_local_score", false]], "get_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner static method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.get_model", false]], "get_target_devices() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_target_devices", false]], "get_target_devices() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_target_devices", false]], "gradient_checkpointing_enable() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.gradient_checkpointing_enable", false]], "iclllmembedder (class in flagembedding.inference.embedder.decoder_only.icl)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder", false]], "layerwisellmreranker (class in flagembedding.inference.reranker.decoder_only.layerwise)": [[99, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker", false]], "lightweightllmreranker (class in flagembedding.inference.reranker.decoder_only.lightweight)": [[100, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker", false]], "load_data_collator() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_data_collator", false]], "load_data_collator() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_data_collator", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_train_dataset() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_train_dataset", false]], "load_trainer() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_trainer", false]], "m3embedder (class in flagembedding.inference.embedder.encoder_only.m3)": [[97, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder", false]], "on_epoch_end() (flagembedding.abc.finetune.embedder.embeddertrainercallbackfordatarefresh method)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh.on_epoch_end", false]], "pooling() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[96, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.pooling", false]], "refresh_epoch() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset.refresh_epoch", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.base)": [[76, "FlagEmbedding.finetune.reranker.decoder_only.base.RerankerModelArguments", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[81, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.RerankerModelArguments", false]], "rerankeroutput (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.RerankerOutput", false]], "run() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.run", false]], "run() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.run", false]], "save() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.save", false]], "save() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.save", false]], "save_pretrained() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save_pretrained", false]], "set_examples() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.set_examples", false]], "start_multi_process_pool() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.start_multi_process_pool", false]], "start_multi_process_pool() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.start_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.stop_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.stop_multi_process_pool", false]]}, "objects": {"FlagEmbedding.abc.finetune.embedder": [[10, 0, 1, "", "AbsEmbedderCollator"], [15, 0, 1, "", "AbsEmbedderDataArguments"], [11, 0, 1, "", "AbsEmbedderModel"], [15, 0, 1, "", "AbsEmbedderModelArguments"], [12, 0, 1, "", "AbsEmbedderRunner"], [10, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [10, 0, 1, "", "AbsEmbedderSameDatasetTrainDataset"], [10, 0, 1, "", "AbsEmbedderTrainDataset"], [13, 0, 1, "", "AbsEmbedderTrainer"], [11, 0, 1, "", "EmbedderOutput"], [10, 0, 1, "", "EmbedderTrainerCallbackForDataRefresh"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel": [[11, 1, 1, "", "_compute_cross_device_neg_loss"], [11, 1, 1, "", "_compute_in_batch_neg_loss"], [11, 1, 1, "", "_compute_no_in_batch_neg_loss"], [11, 1, 1, "", "_dist_gather_tensor"], [11, 1, 1, "", "compute_local_score"], [11, 1, 1, "", "compute_loss"], [11, 1, 1, "", "compute_score"], [11, 1, 1, "", "distill_loss"], [11, 1, 1, "", "encode"], [11, 1, 1, "", "forward"], [11, 1, 1, "", "get_local_score"], [11, 1, 1, "", "save"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner": [[12, 1, 1, "", "load_data_collator"], [12, 1, 1, "", "load_tokenizer_and_model"], [12, 1, 1, "", "load_train_dataset"], [12, 1, 1, "", "load_trainer"], [12, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset": [[10, 1, 1, "", "_create_batch_data"], [10, 1, 1, "", "_get_file_batch_size"], [10, 1, 1, "", "_get_train_group_size"], [10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "refresh_epoch"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset": [[10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "_shuffle_text"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer": [[13, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh": [[10, 1, 1, "", "on_epoch_end"]], "FlagEmbedding.abc.finetune.reranker": [[16, 0, 1, "", "AbsLLMRerankerCollator"], [16, 0, 1, "", "AbsLLMRerankerTrainDataset"], [16, 0, 1, "", "AbsRerankerCollator"], [9, 0, 1, "", "AbsRerankerDataArguments"], [17, 0, 1, "", "AbsRerankerModel"], [9, 0, 1, "", "AbsRerankerModelArguments"], [18, 0, 1, "", "AbsRerankerRunner"], [16, 0, 1, "", "AbsRerankerTrainDataset"], [19, 0, 1, "", "AbsRerankerTrainer"], [17, 0, 1, "", "RerankerOutput"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel": [[17, 1, 1, "", "compute_loss"], [17, 1, 1, "", "enable_input_require_grads"], [17, 1, 1, "", "encode"], [17, 1, 1, "", "forward"], [17, 1, 1, "", "gradient_checkpointing_enable"], [17, 1, 1, "", "save"], [17, 1, 1, "", "save_pretrained"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner": [[18, 1, 1, "", "load_data_collator"], [18, 1, 1, "", "load_tokenizer_and_model"], [18, 1, 1, "", "load_train_dataset"], [18, 1, 1, "", "load_trainer"], [18, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset": [[16, 1, 1, "", "_load_dataset"], [16, 1, 1, "", "_shuffle_text"], [16, 1, 1, "", "create_one_example"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer": [[19, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.inference": [[21, 0, 1, "", "AbsEmbedder"], [22, 0, 1, "", "AbsReranker"]], "FlagEmbedding.abc.inference.AbsEmbedder": [[21, 1, 1, "", "_concatenate_results_from_multi_process"], [21, 1, 1, "", "_encode_multi_process_worker"], [21, 1, 1, "", "encode"], [21, 1, 1, "", "encode_corpus"], [21, 1, 1, "", "encode_multi_process"], [21, 1, 1, "", "encode_queries"], [21, 1, 1, "", "encode_single_device"], [21, 1, 1, "", "get_detailed_instruct"], [21, 1, 1, "", "get_target_devices"], [21, 1, 1, "", "start_multi_process_pool"], [21, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.abc.inference.AbsReranker": [[22, 1, 1, "", "_encode_multi_process_worker"], [22, 1, 1, "", "compute_score"], [22, 1, 1, "", "compute_score_single_gpu"], [22, 1, 1, "", "encode_multi_process"], [22, 1, 1, "", "get_detailed_inputs"], [22, 1, 1, "", "get_detailed_instruct"], [22, 1, 1, "", "get_target_devices"], [22, 1, 1, "", "start_multi_process_pool"], [22, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.finetune.embedder.decoder_only.base": [[77, 0, 1, "", "BiDecoderOnlyEmbedderModel"], [53, 0, 1, "", "DecoderOnlyEmbedderModelArguments"], [78, 0, 1, "", "DecoderOnlyEmbedderRunner"], [79, 0, 1, "", "DecoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel": [[77, 1, 1, "", "_compute_similarity"], [77, 1, 1, "", "_sentence_embedding"], [77, 1, 1, "", "compute_loss"], [77, 1, 1, "", "compute_score"], [77, 1, 1, "", "enable_input_require_grads"], [77, 1, 1, "", "encode"], [77, 1, 1, "", "gradient_checkpointing_enable"], [77, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner": [[78, 1, 1, "", "load_tokenizer_and_model"], [78, 1, 1, "", "load_trainer"], [78, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl": [[59, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [60, 0, 1, "", "BiDecoderOnlyEmbedderICLModel"], [58, 0, 1, "", "DecoderOnlyEmbedderICLDataArguments"], [58, 0, 1, "", "DecoderOnlyEmbedderICLModelArguments"], [61, 0, 1, "", "DecoderOnlyEmbedderICLRunner"], [59, 0, 1, "", "DecoderOnlyEmbedderICLSameDatasetTrainDataset"], [62, 0, 1, "", "DecoderOnlyEmbedderICLTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel": [[60, 1, 1, "", "_compute_similarity"], [60, 1, 1, "", "_sentence_embedding"], [60, 1, 1, "", "compute_loss"], [60, 1, 1, "", "compute_score"], [60, 1, 1, "", "enable_input_require_grads"], [60, 1, 1, "", "encode"], [60, 1, 1, "", "gradient_checkpointing_enable"], [60, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner": [[61, 1, 1, "", "load_tokenizer_and_model"], [61, 1, 1, "", "load_train_dataset"], [61, 1, 1, "", "load_trainer"], [61, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, 1, 1, "", "_create_batch_data"]], "FlagEmbedding.finetune.embedder.encoder_only.base": [[65, 0, 1, "", "BiEncoderOnlyEmbedderModel"], [66, 0, 1, "", "EncoderOnlyEmbedderRunner"], [67, 0, 1, "", "EncoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel": [[65, 1, 1, "", "_compute_similarity"], [65, 1, 1, "", "_sentence_embedding"], [65, 1, 1, "", "compute_loss"], [65, 1, 1, "", "compute_score"], [65, 1, 1, "", "enable_input_require_grads"], [65, 1, 1, "", "encode"], [65, 1, 1, "", "gradient_checkpointing_enable"], [65, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner": [[66, 1, 1, "", "load_tokenizer_and_model"], [66, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.embedder.encoder_only.m3": [[70, 0, 1, "", "EncoderOnlyEmbedderM3Model"], [69, 0, 1, "", "EncoderOnlyEmbedderM3ModelArguments"], [70, 0, 1, "", "EncoderOnlyEmbedderM3ModelForInference"], [71, 0, 1, "", "EncoderOnlyEmbedderM3Runner"], [72, 0, 1, "", "EncoderOnlyEmbedderM3Trainer"], [69, 0, 1, "", "EncoderOnlyEmbedderM3TrainingArguments"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model": [[70, 1, 1, "", "_colbert_embedding"], [70, 1, 1, "", "_compute_similarity"], [70, 1, 1, "", "_dense_embedding"], [70, 1, 1, "", "_encode"], [70, 1, 1, "", "_get_queries_attention_mask"], [70, 1, 1, "", "_sparse_embedding"], [70, 1, 1, "", "compute_colbert_score"], [70, 1, 1, "", "compute_dense_score"], [70, 1, 1, "", "compute_loss"], [70, 1, 1, "", "compute_score"], [70, 1, 1, "", "compute_sparse_score"], [70, 1, 1, "", "enable_input_require_grads"], [70, 1, 1, "", "encode"], [70, 1, 1, "", "ensemble_score"], [70, 1, 1, "", "forward"], [70, 1, 1, "", "gradient_checkpointing_enable"], [70, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference": [[70, 1, 1, "", "forward"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner": [[71, 1, 1, "", "get_model"], [71, 1, 1, "", "load_tokenizer_and_model"], [71, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.reranker.decoder_only.base": [[54, 0, 1, "", "CrossDecoderModel"], [55, 0, 1, "", "DecoderOnlyRerankerRunner"], [56, 0, 1, "", "DecoderOnlyRerankerTrainer"], [76, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel": [[54, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner": [[55, 1, 1, "", "load_tokenizer_and_model"], [55, 1, 1, "", "load_trainer"], [55, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise": [[82, 0, 1, "", "CrossDecoderModel"], [83, 0, 1, "", "DecoderOnlyRerankerRunner"], [84, 0, 1, "", "DecoderOnlyRerankerTrainer"], [81, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel": [[82, 1, 1, "", "encode"], [82, 1, 1, "", "forward"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner": [[83, 1, 1, "", "load_tokenizer_and_model"], [83, 1, 1, "", "load_trainer"], [83, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.encoder_only.base": [[87, 0, 1, "", "CrossEncoderModel"], [88, 0, 1, "", "EncoderOnlyRerankerRunner"], [89, 0, 1, "", "EncoderOnlyRerankerTrainer"]], "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel": [[87, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner": [[88, 1, 1, "", "load_tokenizer_and_model"], [88, 1, 1, "", "load_trainer"]], "FlagEmbedding.inference": [[91, 0, 1, "", "FlagAutoModel"], [92, 0, 1, "", "FlagAutoReranker"]], "FlagEmbedding.inference.FlagAutoModel": [[91, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.FlagAutoReranker": [[92, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.embedder.decoder_only.base": [[93, 0, 1, "", "BaseLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder": [[93, 2, 1, "", "DEFAULT_POOLING_METHOD"], [93, 1, 1, "", "encode"], [93, 1, 1, "", "encode_corpus"], [93, 1, 1, "", "encode_queries"], [93, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.embedder.decoder_only.icl": [[94, 0, 1, "", "ICLLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder": [[94, 2, 1, "", "DEFAULT_POOLING_METHOD"], [94, 1, 1, "", "encode"], [94, 1, 1, "", "encode_corpus"], [94, 1, 1, "", "encode_queries"], [94, 1, 1, "", "encode_queries_single_device"], [94, 1, 1, "", "encode_single_device"], [94, 1, 1, "", "get_detailed_example"], [94, 1, 1, "", "set_examples"]], "FlagEmbedding.inference.embedder.encoder_only.base": [[96, 0, 1, "", "BaseEmbedder"]], "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder": [[96, 2, 1, "", "DEFAULT_POOLING_METHOD"], [96, 1, 1, "", "encode"], [96, 1, 1, "", "encode_corpus"], [96, 1, 1, "", "encode_single_device"], [96, 1, 1, "", "pooling"]], "FlagEmbedding.inference.embedder.encoder_only.m3": [[97, 0, 1, "", "M3Embedder"]], "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder": [[97, 2, 1, "", "DEFAULT_POOLING_METHOD"], [97, 1, 1, "", "colbert_score"], [97, 1, 1, "", "compute_lexical_matching_score"], [97, 1, 1, "", "compute_score"], [97, 1, 1, "", "compute_score_multi_process"], [97, 1, 1, "", "compute_score_single_device"], [97, 1, 1, "", "convert_id_to_token"], [97, 1, 1, "", "encode"], [97, 1, 1, "", "encode_corpus"], [97, 1, 1, "", "encode_queries"], [97, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.reranker.decoder_only.base": [[98, 0, 1, "", "BaseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker": [[98, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise": [[99, 0, 1, "", "LayerWiseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker": [[99, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight": [[100, 0, 1, "", "LightweightLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker": [[100, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.encoder_only.base": [[101, 0, 1, "", "BaseReranker"]], "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker": [[101, 0, 1, "", "compute_score_single_gpu"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "terms": {"": [13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 71, 77, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 125, 127, 128, 129, 130, 132, 134, 135, 136], "0": [9, 10, 11, 15, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 98, 99, 100, 113, 114, 118, 122, 123, 124], "00": [114, 116, 127, 128, 132], "000": 127, "00000004": 113, "00000005": 113, "00016697": 114, "00089447": 114, "001": 128, "00146474": 114, "00310114": 114, "00329455": 114, "00368039": 114, "0043185e": 114, "00599566": 114, "00683443": 105, "00755427": 114, "0075684": 114, "00756918": 105, "00786822": 114, "00790005": 105, "00805702": 114, "00806659": 105, "00819298": 114, "00880391988903284": 116, "0093503": 114, "00991": 128, "00996143": 114, "01": [124, 132], "01041734": 114, "010771302313529425": 128, "010771302313530132": 128, "01113793": 114, "01337725": 114, "01374448": 114, "01503995": 114, "01651684": 114, "01709837": 114, "01715658": 114, "01777726": 114, "01805054": 114, "01843987": 114, "02": [69, 114, 115, 127], "02270943": 105, "02311821": 114, "02357143": 105, "02385841": 114, "02397249": 114, "02429199": 114, "02575599": 114, "02722942": 114, "02838556": 105, "02961654": 114, "02993429": 114, "03": [114, 115, 122, 128], "03038301": 105, "03216": 135, "03260205": 114, "03411707": 114, "03611493": 105, "036222943297402846": 128, "0371782e": 115, "0377209694331257": 128, "037720969433127145": 128, "0379632e": 114, "03835309": 114, "03855301": 114, "038790629929866066": 128, "03879062992990034": 128, "0389353e": 114, "03919311": 114, "039217": 114, "03977485677045894": 128, "039774856770459645": 128, "03988946": 114, "04": [114, 115, 124], "040755156": [114, 116], "04147115653921931": 128, "04356123278888682": 128, "04374858": 105, "04479263": 114, "0449261e": 114, "045134712": [114, 116], "04707828": 114, "04716": 128, "04828531": 114, "05": [24, 69, 114, 115, 116], "050144322": [114, 116], "05022853": 114, "05069073": 114, "05281549383775287": 128, "05432154580979357": 128, "05457945565481172": 128, "05474931": 114, "05985384": 114, "060962623117325254": 128, "06255283252590663": 128, "06259296677860492": 128, "06342201": [114, 116], "06389635013430676": 128, "06396189194646361": 128, "06509776": 114, "06690213479396273": 128, "06it": 128, "07185174301688693": 128, "07364476417961506": 128, "07404093236468848": 128, "07501290390362861": 128, "07507962333910836": 128, "07692307692307693": 118, "077": 118, "08": 69, "081469566": [114, 116], "08164985279853691": 128, "082762718200684": 118, "083": 118, "08333333333333333": 118, "08362077": [114, 116], "088312": 124, "08841": 128, "09038": 122, "09705499215630589": 128, "09824591983546396": 128, "1": [10, 11, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 97, 100, 109], "10": [27, 32, 39, 42, 105, 114, 116, 119, 121, 124, 125, 127, 132, 134], "100": [16, 24, 27, 32, 35, 39, 42, 114, 116, 119, 125, 127, 128, 132, 134], "1000": [24, 27, 32, 35, 39, 42, 122, 123, 124, 128, 135, 136], "10000": 125, "1000000": 125, "100000000": [9, 15, 58], "101": 115, "102": 115, "1024": [24, 27, 32, 35, 42, 113, 116, 118], "10292184602358935": 128, "10292184602358977": 128, "102m": [109, 114], "104": 124, "1045": 115, "104569": 124, "106": 125, "107": 124, "10744937823276134": 128, "10744937823276193": 128, "109m": [109, 114], "10k": 35, "11": [115, 119, 122, 124, 125], "110": 125, "111": [114, 122], "112": 122, "11284619565817842": 128, "113": 122, "114": 124, "11598700704312062": 128, "116": [122, 124], "11679": 114, "117": [122, 124], "11min": 125, "12": [114, 115, 124, 125, 128], "122": 124, "12347288098914058": 128, "124": 124, "12457339152558143": 128, "125": 124, "128": [9, 10, 15, 16, 22, 58, 59, 98, 99, 100, 101, 123, 124, 125], "12807325096717753": 128, "12841084787822227": 128, "12898192060943495": 128, "12942556865700913": 128, "12964639": [114, 116], "12964855554504057": 128, "12969109830101241": 128, "13": [39, 119, 122, 124, 125], "130": 124, "1300413865104607": 128, "13097093150054095": 128, "131": 124, "13118224861025093": 128, "13164524259533786": 128, "13168797291549253": 128, "13241573571401533": 128, "133": [109, 114], "1340775377068567": 128, "13440904793529648": 128, "1346130730317385": 128, "135": 124, "13522755012490456": 128, "13522755012490692": 128, "1355361594910923": 128, "13689369": [114, 116], "137": 124, "1378988612808882": 128, "13794450668758515": 128, "138": 124, "1382786098284509": 128, "13914318784294258": 128, "1396047981645623": 128, "14": [119, 124, 125, 128, 134], "14012953903010958": 128, "14012953903010988": 128, "1404708e": 114, "141": 124, "1410889527057097": 128, "14108895270570979": 128, "144": 124, "14726476953035533": 128, "149": 125, "14976954460144": 128, "15": [124, 125, 128, 134], "150": [125, 134, 135, 136], "15149": 128, "15236205846534961": 128, "15256475371124711": 128, "1536": 113, "1557795701081579": 128, "156": 124, "15610387932529113": 128, "15620049317363813": 128, "158": 124, "158875": 122, "15919987960292029": 128, "15930478114759905": 128, "15934819555197366": 128, "15956349246366208": 128, "16": [32, 53, 58, 76, 81, 119, 122, 123, 124, 125], "1604091882521101": 128, "16057318234658585": 128, "161": 124, "162": 124, "16231721725673165": 128, "163": 124, "1657018523692905": 128, "166": 124, "167": 124, "16823918613191954": 128, "16823918613192046": 128, "169": [124, 125], "17": [119, 125, 128], "170": 124, "17001738": [114, 116], "172": 124, "17346152653542332": 128, "175": 124, "176": 124, "179": 124, "17953": 115, "17min": 125, "18": [32, 119, 122, 125, 135], "180": 124, "1800": 69, "184": 124, "186": 124, "187": 124, "188": [123, 124], "189": 124, "19": 119, "192": 124, "193": 124, "19554448500275612": 116, "197": 123, "199": [123, 124], "1998": 115, "1e": [69, 115, 116], "1min": 125, "1st": 109, "2": [32, 42, 100, 113], "20": [35, 119, 124, 125, 127, 134], "201": 124, "2023": [32, 109], "205": 124, "206": 124, "2082448e": 114, "21": [119, 124, 125, 127, 132], "210": 124, "21061528": 113, "2125367e": 114, "214": 124, "215": 124, "218": [124, 125], "219": 124, "22": [119, 125, 127, 132], "220": 124, "221": 124, "22238": 128, "22279659689895054": 128, "22279659689895104": 128, "2251": 122, "226": 124, "228": 124, "228780": 114, "229": 124, "2293": 115, "22it": 114, "23": [116, 119], "23025740175221762": 128, "23025740175221865": 128, "232": 124, "2320": 114, "233": 124, "2359587e": 114, "2361": 115, "237": 124, "238": 124, "24": [116, 119], "240131": 116, "2402": 135, "241": 124, "245": 124, "247": 124, "24906276": 113, "24b": 132, "24m": [109, 114], "25": [116, 119, 134], "250002": 116, "251": 124, "25167602": [114, 116], "25186998": [114, 116], "255": 124, "256": [21, 22, 93, 94, 96, 97, 114, 124, 127, 132], "257435": 123, "2588": 114, "26": [35, 119, 122], "260": 128, "262": 114, "26957875": [114, 116], "26it": 128, "27": [114, 124], "272": 128, "27280585498859483": 116, "276": 114, "278m": 132, "28": [119, 124], "2811369e": 114, "2842189e": 114, "2892313928157665": 128, "2892313928157675": 128, "29": 122, "2911752e": 114, "2998275e": 115, "2b": 132, "2min": 125, "3": [39, 42, 69, 70, 98, 99, 100, 101, 109, 113, 115, 124], "30": [114, 116, 119, 124, 125, 134], "300": 134, "30057": 122, "30502": 122, "30522": 115, "3072": 115, "31": [122, 125], "31969923": 113, "32": [9, 10, 15, 16, 58, 59, 114, 123, 124, 125, 129, 130], "3211860920443005": 128, "32118609204433185": 128, "3214332e": 115, "32672375": 105, "326m": [109, 114], "327": 105, "3298163165186628": 119, "33": [109, 114, 122, 124], "330": 124, "333": 118, "3333333333333333": 118, "33353207": [114, 116], "335": 114, "335m": [109, 114], "34": [109, 114, 124], "342316": 122, "345639616995194": 128, "3456396169952022": 128, "34739798": 113, "34749585": 116, "349868": 116, "35": [124, 130], "35350388": 105, "354": 105, "3577225e": 114, "35it": 132, "36": [125, 128], "363": 114, "36308263419153386": 128, "3630826341915611": 128, "3666666666666667": 119, "36792332": 105, "368": 105, "3698": 115, "37": 125, "3767978": 121, "37858668": 121, "384": 113, "3894034e": 114, "3911421e": 114, "392": 123, "3924331e": 115, "39290053": 105, "393": 105, "394": 105, "39446455": 105, "3f": 105, "3min": 125, "4": [17, 42, 54, 82, 87, 98, 99, 100, 101, 124], "40": 134, "400": 134, "40196604": 105, "402": 105, "40754": 128, "4083": 115, "409": [109, 114], "4091221e": 114, "4096": 116, "41": [124, 128], "4139402560455192": 128, "419": 125, "42": [69, 124], "42427146": 121, "43": 124, "438": [109, 114], "44": [124, 128], "44429": 122, "45": 124, "4549762e": 115, "46": [124, 125], "4621177911758423": 116, "4626108": 105, "463": 105, "4667": 115, "471": [123, 124], "4740132817599919": 128, "4740132817600036": 128, "474676132202148": 132, "47721898396760526": 128, "4772189839676386": 128, "48": 124, "4865": 114, "4884483e": 114, "49": [122, 124], "4m": [109, 114], "4o": [134, 135, 136], "4x": 124, "5": [27, 39, 42, 45, 105, 113, 115, 116, 123, 124, 128, 129, 130, 134, 135, 136], "50": 134, "500": [69, 121, 134], "5000": [127, 132], "5030322e": 114, "5092714e": 115, "5097007": 121, "51": 124, "512": [9, 21, 22, 93, 94, 96, 97, 98, 99, 100, 101, 114, 115], "51932": 128, "51b": 132, "52": 124, "5208629682313899": 128, "521": 124, "527691": 121, "528": 105, "5284606": 105, "5331": [127, 132], "5337047390639782": 116, "54023": 128, "5409331": 121, "5429113323850182": 128, "5475257e": 114, "55": 124, "550": 125, "5543230e": 114, "55717": 128, "55773": 128, "56": [122, 124, 128, 129], "5603739077423295": 128, "560m": 132, "56202": 128, "563260143484355911": 35, "56344": 128, "56347": 128, "564661930998293": 128, "5660817425350153": 128, "5661121884705748": 128, "568": 125, "5684842": 114, "568m": [114, 132], "57": 124, "5703944e": 115, "57525384": 113, "58": 125, "5845405e": 114, "5856720000000037": 125, "5895271e": 114, "59": [124, 132], "59190154": 113, "5931472182273865": 118, "59364545": 121, "59461": 128, "595": 125, "5955665344840209": 119, "598": 125, "5983": 114, "5989914": 114, "5e": 69, "6": [42, 105, 114, 115, 118, 119, 122, 124, 127, 130], "60": 134, "600": 134, "602461": 124, "603": 105, "6031525": 105, "6062041": 121, "6077381": 115, "608": 105, "6082418": 105, "62": 125, "6210502": 113, "625": 118, "6252808e": 124, "6259035": 116, "63": 124, "630898999999999": 125, "63276503": 113, "63616": 128, "64": [53, 58, 76, 81, 124, 125], "64720015": 113, "6511828e": 124, "65131": 128, "6561864e": 114, "658928": 123, "660": 125, "66063": 128, "6613": 128, "6658131e": 124, "6666666666666666": 119, "66714": 128, "6686779": 121, "6726490e": 114, "6754939e": 114, "6782462": 116, "68": [118, 124, 132], "6840411e": 115, "6852231e": 114, "6860173e": 114, "69": 125, "697673": 113, "7": [42, 45, 105, 114, 118, 119, 121, 125, 129], "70": 124, "71": 124, "714613139629364": 118, "7206438e": 115, "7268854e": 114, "72b": 132, "736794": 114, "74": 124, "742325": 122, "7446640729904175": 118, "7461165": 114, "746731": 124, "75747": 128, "76226806640625": 132, "768": [105, 113, 115, 121, 122, 123, 124, 127, 132, 134, 136], "7761475e": 115, "7796662449836731": 116, "7861": 115, "7900386": 113, "7min": 125, "8": [9, 15, 58, 69, 81, 82, 100, 105, 109, 114, 115, 116, 119, 121, 122, 123, 124, 125], "80": 125, "802726686000824": 118, "8055555555555555": 119, "8074074074074075": 119, "8192": [39, 114, 116], "8194": 116, "823843240737915": 132, "823908": 124, "8240882158279419": 118, "8270": 115, "83": 114, "831": 125, "8333333333333334": 119, "8384371e": 114, "84": [124, 125], "8417887e": 115, "8445771e": 114, "8462474": 114, "849915": 122, "85341793": 114, "862962962962963": 119, "87": [124, 125], "8714428e": 114, "8721525e": 115, "87282517": 113, "8765034e": 114, "88": 124, "88407": 128, "8921868e": 114, "8961012e": 114, "8963409999999716": 125, "89705944": 114, "899": 124, "9": [69, 105, 114, 115, 119, 121, 122, 132], "90": 124, "90017": 114, "90914035": 114, "91": 124, "911423": 124, "9166666666666666": 119, "91it": [116, 127], "93": 124, "9331330e": 114, "94": [122, 125], "9431": 128, "946": 124, "95": [109, 114], "96": 58, "97": [127, 132], "9803897e": 114, "9825": [127, 132], "9869253606521631": [127, 132], "99": 132, "990444999999872": 125, "9905590e": 114, "99147": 128, "995": 132, "9963092975357145": 132, "99644": 128, "999": 69, "9999189999999997": 125, "9999997": [113, 115], "99999976": 113, "9999998": 113, "9999999": [113, 115], "99999994": 113, "99999997": 113, "99999998": 113, "99999999": 113, "9b": 132, "9min": 125, "A": [11, 13, 16, 19, 21, 22, 70, 71, 97, 98, 99, 100, 113, 114, 118, 121, 129, 130, 134, 135, 136], "And": [105, 118, 119, 121, 122, 125, 129], "As": [115, 125], "But": [113, 118, 123, 125], "By": [13, 19, 122, 135, 136], "For": [104, 113, 114, 115, 118, 123, 124, 125, 128, 129, 130, 132, 135, 136], "If": [11, 13, 19, 21, 22, 60, 65, 70, 71, 77, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 104, 114, 115, 116, 121, 122, 127, 134, 135, 136], "In": [105, 114, 115, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "It": [21, 22, 24, 27, 42, 45, 114, 115, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 136], "No": [113, 121], "One": [10, 59, 105], "Or": [24, 27, 32, 35, 39, 42, 45, 130, 135], "That": [113, 123, 135], "The": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 32, 35, 39, 45, 54, 59, 60, 61, 65, 70, 77, 82, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 109, 113, 114, 115, 116, 118, 119, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "Their": 113, "Then": [39, 109, 113, 115, 116, 118, 119, 121, 123, 124, 125, 128, 129, 130, 134, 135, 136], "There": [111, 113, 118, 122, 123], "These": 134, "To": [113, 114, 115], "With": 136, "_": [105, 119, 122, 127, 132], "__init__": 130, "_colbert_embed": [49, 50, 63, 68, 70], "_compute_cross_device_neg_loss": [0, 7, 8, 11], "_compute_in_batch_neg_loss": [0, 7, 8, 11], "_compute_no_in_batch_neg_loss": [0, 7, 8, 11], "_compute_similar": [49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "_concatenate_results_from_multi_process": [0, 20, 21], "_create_batch_data": [0, 7, 8, 10, 49, 50, 51, 57, 59], "_dense_embed": [49, 50, 63, 68, 70], "_description_": [70, 97], "_dist_gather_tensor": [0, 7, 8, 11], "_encod": [49, 50, 63, 68, 70, 114, 115], "_encode_multi_process_work": [0, 20, 21, 22], "_get_file_batch_s": [0, 7, 8, 10], "_get_queries_attention_mask": [49, 50, 63, 68, 70], "_get_train_group_s": [0, 7, 8, 10], "_i": 119, "_load_dataset": [0, 7, 8, 10, 14, 16], "_sentence_embed": [49, 50, 51, 57, 60, 63, 64, 65, 73, 74, 75, 77], "_shuffle_text": [0, 7, 8, 10, 14, 16], "_sparse_embed": [49, 50, 63, 68, 70], "_summary_": [70, 101], "_type_": 70, "a_i": 118, "a_norm": 118, "abc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22], "abil": [94, 109, 114, 129, 130], "abl": 135, "about": [105, 118, 123, 125, 129, 134, 135, 136], "abov": [105, 119, 123], "absargu": [0, 7, 8, 14], "absdataset": [0, 7, 8, 14], "absembedd": [0, 20, 91], "absembeddercol": [0, 7, 8, 12], "absembedderdataargu": [0, 7, 10, 12, 14, 15, 66, 71, 78], "absembeddermodel": [0, 7, 8, 12, 13, 55, 61, 66, 71, 78, 83, 88], "absembeddermodelargu": [0, 7, 12, 14, 15, 66], "absembedderrunn": [0, 7, 8, 12], "absembeddersamedatasetcol": [0, 7, 8, 49, 50, 51, 57], "absembeddersamedatasettraindataset": [0, 7, 8], "absembeddertrain": [0, 7, 8], "absembeddertraindataset": [0, 7, 8, 12], "absembeddertrainingargu": [10, 12, 61, 66, 78], "absllmrerankercol": [0, 7, 14], "absllmrerankertraindataset": [0, 7, 14], "absmodel": [0, 7, 8, 14], "absrerank": [0, 20, 92], "absrerankercol": [0, 7, 14, 18], "absrerankerdataargu": [0, 7, 8, 9, 16, 18, 55, 83, 88], "absrerankermodel": [0, 7, 14, 18, 19, 55, 83, 88], "absrerankermodelargu": [0, 7, 8, 9, 18, 88], "absrerankerrunn": [0, 7, 14, 18], "absrerankertrain": [0, 7, 14], "absrerankertraindataset": [0, 7, 14, 18], "absrerankertrainingargu": [18, 55, 83, 88], "absrunn": [0, 7, 8, 14], "abstract": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 82], "abstrain": [0, 7, 8, 14], "academi": [105, 111, 114], "acceler": [113, 116, 132], "accelerator_config": 69, "accept": [121, 123, 125, 129], "acclaim": [105, 121], "accomplish": [113, 134, 136], "accord": [91, 92, 105, 114, 129, 130], "accur": [132, 135], "accuraci": 123, "acoust": 113, "across": [32, 35, 45, 97, 113, 119, 127, 128], "acrross": 122, "activ": [17, 24, 60, 65, 70, 77, 115, 116], "actor": [105, 121], "actual": [16, 119, 127], "ad": [116, 121, 123, 124, 125], "adafactor": 69, "adam_beta1": 69, "adam_beta2": 69, "adam_epsilon": 69, "adamw_torch": 69, "add": [114, 121, 122, 123, 124, 125, 127, 132, 134], "addit": [21, 22, 135], "additional_special_token": [53, 58], "adjust": [60, 65, 70, 77, 122], "adopt": [129, 130, 135], "advanc": 113, "advantag": 113, "advis": [21, 22], "afqmc": 130, "after": [10, 59, 96, 105, 122, 123, 129, 130, 132], "aggreg": 136, "ai": [105, 121, 134], "ailuropoda": 132, "aim": 111, "air": 23, "air_bench": 24, "al": 122, "alexnet": 105, "algorithm": [123, 124], "alias": 35, "align": 35, "all": [11, 13, 19, 21, 22, 105, 113, 118, 119, 121, 123, 127, 129, 130, 134, 135, 136], "all_scor": 11, "allevi": [109, 114], "alloc": 122, "allow": [123, 132], "almost": 122, "along": [21, 22, 94, 113], "alreadi": [118, 121, 123, 125, 127, 129], "also": [13, 19, 24, 32, 45, 113, 114, 122, 125, 128, 129, 134, 136], "altern": 129, "altman": [105, 121], "am": 118, "amazoncounterfactualclassif": 129, "amazonpolarityclassif": 129, "amazonreviewsclassif": 129, "american": 134, "amid": 134, "amount": [113, 122, 123, 125, 135, 136], "an": [10, 21, 22, 32, 35, 39, 45, 105, 113, 116, 121, 123, 125, 127, 128, 129, 130, 134, 135, 136], "analysi": 136, "analyz": 136, "andrew": [105, 121], "angl": 118, "ani": [16, 21, 22, 24, 70, 93, 94, 96, 97, 98, 99, 100, 101, 105, 123, 125], "ann": [123, 125], "anna": 118, "anoth": [98, 99, 100, 123], "answer": [35, 42, 105, 114, 127, 132, 134, 135, 136], "ap": 119, "ap_sum": 119, "api": [113, 114, 115, 134, 135, 136], "appear": [105, 113, 116, 130], "append": [119, 127, 132], "appli": 123, "applic": [45, 125, 128, 135, 136], "approach": [113, 122], "appropri": [10, 12, 18, 91, 92], "approxim": [123, 124], "ar": [32, 35, 99, 100, 105, 109, 111, 113, 114, 115, 116, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "architectur": [113, 132], "area": 111, "arg": [10, 13, 16, 17, 19, 39, 56, 59, 62, 67, 72, 79, 84, 89, 130], "arguana": [27, 128, 129], "argument": [1, 9, 10, 12, 15, 16, 18, 49, 50, 51, 52, 55, 57, 59, 61, 63, 68, 71, 73, 74, 75, 78, 80, 83, 127], "arrai": [21, 91, 93, 94, 96, 97, 114, 119, 127, 132, 134], "arri": 97, "articl": 39, "artifici": [111, 114], "artist": [105, 121], "artistri": 134, "arxiv": [24, 135], "arxivclusteringp2p": 129, "arxivclusterings2": 129, "as_query_engin": 136, "as_retriev": 135, "asarrai": [113, 127, 132], "asia": 132, "ask": [135, 136], "askubuntudupquest": 129, "aspect": 125, "assembl": [115, 135], "assert": 122, "assess": [45, 128], "assign": [123, 129, 130], "assist": 134, "assum": [119, 127], "astonish": [105, 121], "astyp": [119, 121, 122, 127, 132], "atec": 130, "ation": 116, "atmospher": 134, "attent": [70, 96, 115, 116], "attention_mask": [60, 65, 70, 77, 96, 115], "attribut": [97, 127, 136], "aug": 109, "augment": 114, "authent": 134, "auto": 69, "auto_find_batch_s": 69, "autom": 24, "automat": [91, 92, 114, 124], "automodel": [60, 65, 70, 77, 115, 116], "autotoken": [11, 17, 54, 60, 65, 70, 77, 82, 87, 115, 116], "avail": [129, 132, 134], "averag": [116, 119, 129, 130], "avg": 134, "avoid": [10, 59, 123], "award": [105, 121], "b": [98, 99, 100, 116, 118], "b_i": 118, "b_norm": 118, "baai": [24, 27, 32, 35, 39, 42, 45, 105, 109, 110, 113, 115, 116, 118, 121, 127, 128, 129, 130, 132, 134, 135, 136], "back": 97, "bag": [113, 116], "bake": 118, "balanc": [109, 125], "banh": 134, "banking77classif": 129, "bar": 134, "base": [11, 12, 17, 18, 21, 22, 27, 39, 49, 50, 51, 53, 54, 55, 56, 60, 62, 63, 65, 66, 67, 70, 73, 74, 76, 77, 78, 79, 84, 85, 87, 88, 89, 93, 96, 98, 99, 100, 101, 105, 109, 113, 114, 115, 116, 121, 123, 127, 128, 129, 130, 132, 134, 135, 136], "base_model": [11, 17, 54, 60, 65, 70, 77, 82, 87], "baseembedd": [90, 95], "basellmembedd": [90, 93, 95], "basellmrerank": [90, 102], "basererank": [90, 102], "basic": [111, 122, 128], "basketbal": 113, "batch": [10, 11, 16, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 93, 94, 96, 97, 98, 99, 100, 101, 115, 128, 129, 130], "batch_eval_metr": 69, "batch_raw_data": [10, 59], "batch_siz": [21, 22, 93, 94, 96, 97, 98, 99, 100, 101, 114, 127, 130, 132], "bcd": 134, "bear": 132, "becaus": [118, 123, 125, 135], "becom": 124, "beef": 134, "befor": [113, 118, 121, 123, 124, 125, 132], "begin": 115, "behavior": [13, 19], "beij": [111, 114], "being": [13, 19, 24, 136], "beir": [23, 128, 129, 130], "beir_eval_result": 27, "below": [105, 121, 128, 130, 134, 135, 136], "bench": 23, "bench_24": 24, "benchmark": [24, 27, 45, 109, 125, 128, 129, 130], "benchmark_vers": 24, "benefici": [105, 121], "bert": [113, 114, 115], "bertattent": 115, "bertembed": 115, "bertencod": 115, "bertintermedi": 115, "bertlay": 115, "bertmodel": 115, "bertoutput": 115, "bertpool": 115, "bertselfattent": 115, "bertselfoutput": 115, "besid": [111, 122], "best": [105, 121, 125], "better": [113, 132], "between": [32, 60, 65, 70, 77, 105, 109, 113, 116, 118, 119, 124, 129, 130, 135, 136], "bf16": [69, 98, 99, 100], "bf16_full_ev": 69, "bge": [24, 27, 32, 35, 39, 42, 45, 94, 97, 105, 110, 111, 118, 121, 127, 128, 129, 130, 132, 134, 135, 136], "bgem3flagmodel": [114, 116], "bia": [115, 116], "bidecoderonlyembeddericlmodel": [49, 50, 51, 57, 60], "bidecoderonlyembeddermodel": [49, 73, 74, 75, 77], "biencoderonlyembeddermodel": [49, 50, 63, 64, 65], "bin": [121, 127], "binari": [119, 123, 129, 130], "biorxivclusteringp2p": 129, "biorxivclusterings2": [45, 129], "bioss": 129, "bit": 124, "bm": 116, "bm25": [113, 114, 116], "bn": 32, "bool": [9, 10, 11, 13, 15, 16, 19, 21, 22, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101], "bot": [134, 135, 136], "both": [11, 13, 19, 118, 119, 127, 132, 134], "bourbon": 134, "bow": 113, "bq": 130, "brad": [105, 121], "break": [105, 119, 121, 127, 132], "brief": 134, "brute": 125, "bucket": [123, 124], "build": [111, 121, 123, 134, 135, 136], "built": [39, 122], "bunch": 134, "burden": 125, "c": [105, 109, 119, 121, 122, 123, 124, 125, 127, 132], "c22ab2a51041ffd869aaddef7af8d8215647e41a": 128, "c_mteb": 130, "cach": [24, 27, 32, 35, 39, 42, 45, 71, 93, 94, 96, 97, 98, 99, 100, 101], "cache_dir": [9, 15, 24, 32, 35, 39, 42, 45, 53, 58, 69, 71, 76, 81, 93, 94, 96, 97, 98, 99, 100, 101], "cache_path": [9, 15, 27, 32, 35, 39, 42, 58], "calc_ap": 119, "calc_map": 119, "calc_mrr": 119, "calc_precis": 119, "calc_recal": [119, 127, 132], "calcul": [118, 119, 124, 127, 132], "call": [10, 11, 17, 70, 82, 114, 128, 132, 136], "callabl": [13, 19, 56, 62, 67, 72, 79, 84, 89], "callback": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "can": [21, 22, 24, 27, 32, 35, 39, 42, 45, 98, 99, 100, 104, 105, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 127, 129, 130, 134, 135, 136], "candid": 116, "cap": [116, 118, 119], "capabl": [119, 127, 132, 135], "capsul": 136, "captur": [113, 114, 115, 116, 128, 129], "care": [118, 129], "case": [113, 115, 118, 121, 122, 123, 127, 129, 135, 136], "casual": 134, "cat": [113, 132], "caus": [118, 123], "caution": 129, "cd": 104, "cdist": 118, "cdot": [116, 118], "cell": [113, 114, 115, 121, 123, 124, 125, 127, 135, 136], "centroid": 124, "ceo": [105, 121], "certain": 113, "chain": [134, 135], "challeng": 32, "chanc": 118, "chang": [24, 27, 32, 35, 39, 42, 45, 121, 129, 130], "charact": [113, 135, 136], "chat": [114, 134, 135, 136], "chat_model": 135, "chatbot": [134, 135], "chatopenai": 135, "chatprompttempl": 135, "check": [113, 114, 115, 121, 122, 123, 128, 129, 130, 135, 136], "checkout": 132, "checkpoint": [17, 60, 65, 70, 77], "chees": 134, "chef": 134, "cheli": 134, "chick": 134, "chicken": 134, "child": [91, 92], "children": [21, 22], "china": 132, "chines": [109, 114, 130, 132, 134], "chinesetasklist": 130, "chmod": [24, 27, 32, 35, 39, 42, 45], "choic": [113, 115, 122, 123, 124, 125, 127, 134, 136], "choos": [39, 91, 92, 100, 105, 123, 127, 130, 135], "chose": 128, "chosen": [116, 128, 136], "chunk": [135, 136], "chunk_overlap": [135, 136], "chunk_siz": [135, 136], "cinemat": [105, 121], "cl": [65, 69, 70, 96, 97, 115, 116, 130], "class": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 114, 122, 124, 127, 128, 130], "classic": 134, "classif": [113, 129, 130], "classmethod": [91, 92], "clean": 135, "clear": 118, "client": [113, 134], "climatefev": [128, 129], "clone": 104, "cloner": 122, "close": [118, 134], "closer": [113, 118], "closest": [123, 124], "clsclusteringp2p": 130, "clsclusterings2": 130, "club": [105, 121], "cluster": [113, 123, 124, 129, 130], "cmedqaretriev": 130, "cmedqav1": 130, "cmedqav2": 130, "cmnli": 130, "co": [116, 118, 121, 122], "cobert": 97, "cobert_dim": 97, "cocktail": 134, "code": [111, 115, 122, 123], "codebook": 124, "coeffici": 118, "coher": 113, "colber": 70, "colbert": [70, 71, 97, 114, 116], "colbert_dim": [69, 71, 97], "colbert_scor": [70, 90, 95, 97, 116], "colbert_vec": [97, 114, 116], "colbert_weight": 70, "collat": [10, 12, 16, 18, 59], "collect": [113, 114], "collis": 123, "com": [35, 104, 125], "combin": [21, 22, 94, 122, 125], "combine_docu": 135, "come": [35, 113, 134], "comfort": 134, "command": [129, 130], "common": [114, 123], "commonli": [115, 136], "commun": [113, 135], "compar": [118, 119, 123, 127, 129], "comparison": 125, "compet": 128, "competit": [109, 114], "compl": [10, 59], "complet": [21, 22, 94, 132, 134, 136], "complex": [113, 125, 136], "compliment": 134, "composit": 122, "comprehens": 42, "compress": [100, 123, 124, 132], "compress_lay": 100, "compress_ratio": 100, "compris": [35, 129, 130], "comput": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 91, 92, 93, 96, 97, 98, 99, 100, 101, 105, 113, 114, 116, 118, 119, 121, 123, 124, 125, 129, 132], "compute_cod": 124, "compute_colbert_scor": [49, 50, 63, 68, 70], "compute_dense_scor": [49, 50, 63, 68, 70], "compute_lexical_matching_scor": [90, 95, 97, 116], "compute_local_scor": [0, 7, 8, 11], "compute_loss": [0, 7, 8, 11, 13, 14, 17, 19, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "compute_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "compute_recal": 125, "compute_scor": [0, 7, 8, 11, 20, 22, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 90, 95, 97, 132], "compute_score_func": 11, "compute_score_multi_process": [90, 95, 97], "compute_score_single_devic": [90, 95, 97], "compute_score_single_gpu": [0, 20, 22, 90, 98, 99, 100, 101, 102], "compute_sparse_scor": [49, 50, 63, 68, 70], "comupt": 116, "comuput": 124, "concaten": [11, 21, 22, 114], "concis": [105, 121, 129], "conclus": 118, "conda": [121, 122, 123, 124, 125], "config": [21, 22, 98, 99, 100], "config_nam": [9, 15, 53, 58, 69, 76, 81], "congrat": 127, "connect": [113, 123, 136], "consid": [113, 119, 123, 125, 127], "consider": 118, "constitut": 39, "construct": [123, 135, 136], "consum": [121, 123, 127, 129], "consumpt": 16, "contain": [16, 21, 22, 24, 32, 45, 70, 71, 111, 115, 119, 121, 122, 124, 127, 128, 129, 130, 132, 135, 136], "content": [111, 128, 129, 130, 134, 135], "context": [113, 114, 132, 135, 136], "context_str": 136, "continuum": 32, "contribut": [105, 121], "control": [10, 11, 60, 65, 70, 77, 122], "convers": [16, 114], "convert": [97, 115], "convert_id_to_token": [90, 95, 97, 116], "convert_to_numpi": [21, 93, 94, 96, 114, 115, 134], "convini": 118, "convsearch": 114, "coordin": 118, "copi": [129, 130], "core": 136, "corpu": [21, 39, 93, 94, 96, 97, 105, 113, 114, 119, 121, 122, 125, 127, 129, 130, 132, 134, 135], "corpus_embd": [27, 32, 35, 39, 42], "corpus_embd_save_dir": [27, 32, 35, 39, 42], "corpus_embed": [105, 121, 127, 132], "corpus_s": 122, "correct": [115, 118, 135], "correctli": [119, 127, 135], "correl": [129, 130], "correspond": [105, 114, 115, 122, 124, 127], "cos_1": 118, "cos_dist1_2": 118, "cos_dist1_3": 118, "cosin": [129, 130], "cosine_similar": 118, "cost": [113, 116, 123, 127, 134], "could": [105, 113, 123, 135, 136], "courpu": [105, 121], "cours": [105, 121, 134], "coursera": [105, 121], "cover": [24, 39, 105, 119, 125, 128], "coverag": 123, "covidretriev": 130, "cpu": [21, 22, 123, 124, 125, 127, 132, 134], "cqadupstack": [27, 128], "cqadupstackandroidretriev": [128, 129], "cqadupstackenglishretriev": [128, 129], "cqadupstackgamingretriev": [128, 129], "cqadupstackgisretriev": [128, 129], "cqadupstackmathematicaretriev": [128, 129], "cqadupstackphysicsretriev": [128, 129], "cqadupstackprogrammersretriev": [128, 129], "cqadupstackstatsretriev": [128, 129], "cqadupstacktexretriev": [128, 129], "cqadupstackunixretriev": [128, 129], "cqadupstackwebmastersretriev": [128, 129], "cqadupstackwordpressretriev": [128, 129], "crab": 134, "craft": 134, "creat": [10, 16, 59, 105, 113, 121, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "create_meta": [129, 130], "create_one_exampl": [0, 7, 14, 16], "create_retrieval_chain": 135, "create_stuff_documents_chain": 135, "creation": 125, "creativ": 134, "cross": [11, 60, 65, 70, 77, 132], "crossdecodermodel": [49, 50, 51, 52, 54, 73, 74, 80, 82], "crossencodermodel": [49, 73, 85, 86, 87], "crucial": [45, 123, 124, 127, 128], "cuda": [24, 27, 32, 35, 39, 42, 45, 98, 99, 100], "cuisin": 134, "culinari": 134, "cumul": [119, 127], "cup": [32, 118], "current": [10, 17, 59, 60, 65, 70, 77, 119], "curri": 134, "curs": [113, 123], "custom": [13, 19, 21, 22, 134, 136], "cut": 134, "cut_off": [127, 132], "cutoff": [105, 119, 127, 128, 132], "cutoff_lay": [99, 100], "d": [115, 118, 122, 123, 124, 125, 127, 132, 134], "da": 134, "dai": [113, 132], "daili": [129, 130, 134], "danc": [105, 121], "data": [9, 10, 12, 15, 16, 18, 24, 27, 32, 35, 39, 42, 55, 58, 59, 61, 71, 78, 83, 98, 99, 100, 101, 113, 121, 123, 124, 125, 127, 132], "data_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "data_col": [13, 19, 56, 62, 67, 72, 79, 84, 89], "data_se": 69, "data_url": 125, "databas": [135, 136], "datacol": [13, 19, 56, 62, 67, 72, 79, 84, 89], "dataload": [98, 99], "dataloader_drop_last": 69, "dataloader_num_work": [10, 59, 69], "dataloader_persistent_work": 69, "dataloader_pin_memori": 69, "dataloader_prefetch_factor": 69, "dataset": [1, 10, 12, 13, 16, 18, 19, 32, 35, 39, 42, 45, 49, 50, 51, 56, 57, 61, 62, 67, 72, 79, 84, 89, 91, 92, 93, 94, 96, 97, 98, 99, 105, 113, 115, 119, 122, 123, 128, 129, 135, 136], "dataset_dir": [27, 32, 35, 39, 42], "dataset_nam": [27, 32, 35, 39, 42], "dataset_revis": 128, "datset": 10, "dave": 35, "db": 135, "dbpedia": [128, 129], "dcg": [119, 127], "dcg_p": [119, 127], "ddp_backend": 69, "ddp_broadcast_buff": 69, "ddp_bucket_cap_mb": 69, "ddp_find_unused_paramet": 69, "ddp_timeout": 69, "de": 116, "debug": 69, "debug_util": 69, "debugopt": 69, "decis": 10, "decod": [49, 50, 53, 54, 55, 58, 60, 61, 73, 76, 77, 78, 81, 82, 83, 93, 98, 99, 100, 123], "decoder_onli": [53, 54, 55, 56, 58, 59, 60, 61, 62, 76, 77, 78, 79, 81, 82, 83, 84, 93, 94, 98, 99, 100], "decoderonlyembeddericldataargu": [49, 50, 51, 57, 58, 59, 61], "decoderonlyembeddericlmodelargu": [49, 50, 51, 57, 58, 61], "decoderonlyembeddericlrunn": [49, 50, 51, 57, 61], "decoderonlyembeddericlsamedatasettraindataset": [49, 50, 51, 57, 61], "decoderonlyembeddericltrain": [49, 50, 51, 57, 61, 62], "decoderonlyembeddermodelargu": [49, 50, 51, 52, 53, 78], "decoderonlyembedderrunn": [49, 73, 74, 75, 78], "decoderonlyembeddertrain": [49, 73, 74, 75, 78, 79], "decoderonlyrerankerrunn": [49, 50, 51, 52, 55, 73, 74, 80, 83], "decoderonlyrerankertrain": [49, 50, 51, 52, 55, 56, 73, 74, 80, 83, 84], "decor": 134, "decreas": 115, "deep": [105, 121], "deepspe": 69, "def": [105, 115, 118, 119, 125, 127, 130, 132], "default": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 122, 128, 136], "default_batch_s": [10, 59], "default_pooling_method": [90, 93, 94, 95, 96, 97], "defaultdict": 114, "defin": [114, 116, 118, 123], "definit": [118, 135], "degrad": [21, 22, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 132], "delici": 134, "demand": 113, "demonstr": [113, 116, 125, 128], "denomin": [118, 119], "denot": 118, "dens": [70, 97, 113, 114, 115, 135], "dense_scor": 70, "dense_vec": [97, 114, 116], "dense_weight": 70, "depend": [104, 116, 121, 127, 130, 132], "deploi": [122, 132], "deprec": 100, "desc": [127, 132], "descend": 105, "descript": [109, 114, 132, 136], "design": [27, 45, 128, 134], "destin": 125, "detach": 115, "detail": [16, 22, 113, 114, 115, 130, 132, 135], "determin": [129, 130], "dev": [24, 27, 32, 39, 42, 127, 129, 132], "develop": [104, 111, 113, 114], "devic": [11, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 91, 93, 94, 96, 97, 98, 99, 100, 101, 122], "diagram": 123, "dict": [11, 13, 16, 17, 19, 21, 22, 54, 56, 60, 62, 65, 67, 69, 70, 71, 72, 77, 79, 82, 84, 87, 89, 94, 97], "dictionari": [13, 16, 19, 21, 22, 54, 70, 71, 87, 97, 114, 123], "differ": [32, 45, 97, 113, 114, 115, 118, 119, 123, 125, 127, 128, 129, 130, 132, 134, 135], "digit": 113, "dim": [71, 115, 118, 121, 122, 127, 132, 136], "dimens": [97, 115, 123, 124, 125, 127, 136], "dimension": [113, 123, 124, 136], "dine": 134, "dinner": 134, "dir": 71, "dir_to_fil": 136, "direct": 124, "directli": [114, 118, 122, 123, 128, 129, 130, 132], "directori": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 93, 94, 96, 97, 98, 99, 100, 101, 121, 127, 135, 136], "disable_tqdm": 69, "discount": [119, 127], "discrib": 123, "discript": [105, 121], "dish": 134, "disign": 132, "dispatch_batch": 69, "displai": 136, "dissimilar": 118, "dist": [118, 121], "distanc": [116, 122, 123, 124, 127, 129], "distil": [10, 11, 17, 59, 60, 65, 70, 77, 82], "distill_loss": [0, 7, 8, 11], "distinct": [105, 121, 134], "distinguish": [114, 135], "distribut": [11, 109, 114, 124, 125], "distroi": 123, "divers": [35, 39, 105, 114, 121, 135], "divic": 122, "divid": [118, 124], "do": [70, 104, 113, 121, 122, 123, 127, 128, 129, 132], "do_ev": 69, "do_predict": 69, "do_train": 69, "doc": [24, 39, 119, 121, 134, 135], "doc_chain": 135, "doc_encod": 16, "docid": 39, "document": [10, 16, 17, 32, 39, 59, 82, 111, 113, 114, 116, 119, 127, 129, 130, 134, 136], "document_load": 135, "doe": [16, 105, 118, 122, 123, 125, 135, 136], "dog": 113, "domain": [24, 35, 105, 121], "don": [114, 116, 129], "done": [124, 129, 130], "dot": 105, "dot_prod": 118, "downei": [105, 121], "download": [10, 21, 22, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 125, 127, 132, 135, 136], "downstream": 116, "downtown": 134, "driven": [105, 121], "drop_threshold": [15, 58], "dropout": [115, 116], "dtype": [114, 118, 121, 125, 127, 132, 134], "due": [116, 123], "dure": [11, 60, 65, 70, 77, 118, 125, 127, 132], "duretriev": 130, "dynam": 24, "e": [104, 122], "e_p": 116, "e_q": 116, "each": [21, 22, 32, 35, 93, 94, 96, 97, 98, 99, 100, 101, 105, 114, 115, 116, 119, 121, 122, 123, 124, 125, 127, 129, 130, 132, 134], "earli": 113, "earthi": 134, "easi": [45, 128, 132], "easier": 24, "easili": 128, "ecomretriev": 130, "edg": 123, "edit": 104, "edmund": 35, "ef_construct": [123, 125], "ef_search": [123, 125], "efconstruct": [123, 125], "effect": [105, 119, 124, 127], "effici": [113, 123, 130, 132], "efsearch": [123, 125], "eight": [45, 128], "either": [116, 118], "element": [13, 19, 105, 123, 124, 125], "elementwise_affin": [115, 116], "elif": 115, "els": [115, 119, 129], "emb": [113, 121, 134, 135, 136], "embed": [11, 12, 17, 21, 27, 45, 60, 65, 66, 70, 77, 78, 91, 93, 94, 96, 97, 109, 110, 115, 116, 118, 119, 122, 123, 128, 129, 130, 134, 135, 136], "embed_model": 136, "embedcol": [10, 59], "embedd": [0, 7, 10, 11, 12, 13, 15, 21, 24, 27, 32, 35, 39, 42, 45, 49, 53, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 77, 78, 79, 90, 91, 93, 94, 96, 97, 111], "embedder_name_or_path": [24, 27, 32, 35, 39, 42, 45], "embedder_passage_max_length": 39, "embeddermodelclass": 91, "embedderoutput": [0, 7, 8, 13, 70], "embeddertrainercallbackfordatarefresh": [0, 7, 8], "embedding_1": 118, "embedding_2": 118, "embedding_3": 118, "embedding_model": 135, "embeddings_1": 116, "embeddings_2": 116, "embeed": 124, "eminem": [105, 121], "emotionclassif": 129, "en": [24, 27, 35, 42, 45, 94, 105, 109, 113, 114, 115, 118, 121, 127, 128, 129, 132, 134, 135, 136], "enabl": [17, 60, 65, 70, 77, 113, 124], "enable_input_require_grad": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "encod": [0, 7, 8, 9, 11, 14, 16, 17, 20, 21, 22, 49, 50, 51, 52, 54, 56, 57, 60, 62, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 101, 105, 113, 114, 116, 118, 119, 121, 127, 130, 132, 134], "encode_corpu": [0, 20, 21, 90, 93, 94, 95, 96, 97], "encode_kei": 114, "encode_kwarg": 135, "encode_multi_process": [0, 20, 21, 22], "encode_psg": 16, "encode_qri": 16, "encode_queri": [0, 20, 21, 90, 93, 94, 95, 96, 97, 114, 121, 127, 132, 134], "encode_queries_single_devic": [90, 94, 95], "encode_single_devic": [0, 20, 21, 90, 93, 94, 95, 96, 97], "encoder_onli": [65, 66, 67, 69, 70, 71, 72, 87, 88, 89, 96, 97, 101], "encoderonlyembedderm3model": [49, 50, 63, 68], "encoderonlyembedderm3modelargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderm3modelforinfer": [49, 50, 63, 68], "encoderonlyembedderm3runn": [49, 50, 63, 68, 71], "encoderonlyembedderm3train": [49, 50, 63, 68, 71, 72], "encoderonlyembedderm3trainingargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderrunn": [49, 50, 63, 64, 66], "encoderonlyembeddertrain": [49, 50, 63, 64, 66, 67], "encoderonlyrerankerrunn": [49, 73, 85, 86, 88], "encoderonlyrerankertrain": [49, 73, 85, 86, 88, 89], "encourag": 129, "end": [10, 115], "endem": 132, "eng": [45, 128, 129], "engin": [129, 136], "england": 134, "english": [109, 114, 128, 129, 130, 132], "enhanc": [94, 109, 114], "enjoi": 118, "enough": [105, 113, 123, 129, 134], "ensembl": 70, "ensemble_scor": [49, 50, 63, 68, 70], "entir": [113, 116], "entiti": 35, "entri": 123, "entropi": [60, 65, 70, 77], "enumer": [105, 119, 121, 127, 132], "env": [121, 122], "environ": [105, 113, 114, 115, 116, 121, 122, 127, 128, 129, 132, 134, 135, 136], "ep": [115, 116], "epoch": 10, "equal": [129, 130], "etc": [119, 134], "euc_dist1_2": 118, "euc_dist1_3": 118, "euclidean": [123, 125], "eval": [115, 116, 119], "eval_accumulation_step": 69, "eval_air_bench": 24, "eval_beir": 27, "eval_dataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "eval_delai": 69, "eval_do_concat_batch": 69, "eval_metr": [27, 32, 35, 39, 42], "eval_miracl": 32, "eval_mkqa": 35, "eval_mldr": 39, "eval_msmarco": 42, "eval_mteb": 45, "eval_nam": [27, 32, 35, 39, 42, 45], "eval_on_start": 69, "eval_output_method": [27, 32, 35, 39, 42], "eval_output_path": [27, 32, 35, 39, 42, 45], "eval_split": 129, "eval_step": 69, "eval_strategi": 69, "eval_use_gather_object": 69, "evaldenseretriev": 1, "evalpredict": [13, 19, 56, 62, 67, 72, 79, 84, 89], "evalrerank": 1, "evalretriev": 1, "evalu": [24, 27, 32, 35, 39, 42, 45, 111, 125, 128], "evaluation_strategi": 69, "evaluation_tim": 128, "even": [118, 123, 125, 127, 129], "event": 10, "everi": [11, 17, 70, 82], "every_sav": 69, "everyth": 135, "everywher": 134, "exactli": 115, "exampl": [16, 24, 27, 32, 35, 39, 42, 45, 94, 111, 113, 115, 119, 124, 129, 132, 136], "example_id": 35, "example_passage_max_len": 58, "example_query_max_len": 58, "examples_for_task": 94, "examples_instruction_format": 94, "excel": 113, "except": 134, "excit": [111, 134], "execut": [12, 18], "exhaust": 127, "exist": [116, 129], "expand": [111, 118], "expect": [115, 134], "experi": [125, 127, 129, 134], "expert": [105, 121], "explan": 135, "explor": [111, 123], "express": 118, "exquisit": 134, "extend": [21, 22], "extens": 123, "extra": [113, 134], "extrem": [113, 122, 125], "f": [105, 113, 114, 115, 116, 118, 119, 121, 123, 124, 125, 127, 130, 132], "f1": [129, 130], "f_": 116, "facilit": 132, "factor": [123, 124], "factori": [9, 15, 53, 58, 69, 76, 81], "fail": 113, "fair": 134, "fairli": 129, "faiss": [125, 127, 132, 134, 135, 136], "faiss_index": 136, "faissvectorstor": 136, "fake": 122, "fall": [118, 123], "fals": [9, 11, 13, 15, 19, 22, 24, 27, 32, 35, 39, 53, 58, 60, 65, 69, 70, 71, 76, 77, 81, 92, 93, 94, 96, 97, 98, 99, 100, 101, 114, 115, 116, 119, 127], "famili": 123, "familiar": [111, 132], "famou": [105, 121, 134], "fast": [113, 121, 132, 134], "faster": [24, 129], "favor": 134, "favorit": 118, "featur": [10, 11, 16, 17, 54, 60, 65, 70, 77, 82, 87, 113, 134], "feed": [11, 60, 65, 70, 77], "feel": [114, 115, 127, 132], "fei": [105, 121], "femal": [105, 121], "fetch": [114, 116], "fever": [128, 129], "few": [94, 118, 121, 123], "fidel": 123, "field": 113, "fight": [105, 121], "figur": [105, 121, 134], "fil": 134, "file": [113, 114, 116, 123, 124, 125, 128, 135, 136], "file_path": [10, 16], "fill": [113, 134, 135, 136], "film": [105, 121], "fin": 116, "final": [10, 105, 116, 134, 136], "find": [113, 127, 129, 130], "fine": [12, 18, 114, 116, 129], "finest": 134, "finetun": [0, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 91, 92, 104, 111], "finish": 129, "fiqa": 27, "fiqa2018": [128, 129], "fire": 134, "first": [13, 19, 45, 97, 105, 109, 113, 114, 115, 118, 119, 121, 122, 123, 124, 127, 128, 130, 132, 134, 135, 136], "firstli": 116, "fit": [123, 125], "fix": 124, "fix_encod": 69, "fix_position_embed": 69, "flag_dres_model": 130, "flagautomodel": 90, "flagautorerank": 90, "flagdresmodel": 130, "flagembed": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 104, 105, 113, 114, 115, 116, 118, 121, 127, 130, 132, 134], "flagmodel": [105, 113, 114, 115, 118, 121, 127, 132, 134], "flagopen": 104, "flagrerank": 132, "flat": [121, 122, 123, 124, 127, 132], "flavor": 134, "float": [9, 10, 11, 15, 21, 22, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 91, 92, 93, 96, 97, 98, 99, 100, 101, 115, 124], "float32": [114, 118, 121, 122, 125, 127, 132], "focu": 134, "focus": 32, "folder": 111, "follow": [35, 94, 105, 113, 114, 115, 116, 118, 119, 121, 125, 127, 129, 130, 132, 135, 136], "food": 134, "footprint": 125, "forc": 125, "form": [119, 123, 127], "format": [10, 21, 22, 59, 94, 134], "forward": [0, 7, 8, 11, 14, 17, 49, 50, 63, 68, 70, 73, 74, 80, 82], "found": [10, 16, 32, 114, 134], "foundat": [105, 121], "fp16": 69, "fp16_backend": 69, "fp16_full_ev": 69, "fp16_opt_level": 69, "frac": [116, 118, 119, 127], "framework": [45, 128, 135, 136], "free": [113, 114, 115, 127, 132], "freedom": 132, "freeli": 113, "freeman": [105, 121], "french": 134, "frequenc": [113, 122], "freshest": 134, "fri": 134, "from": [10, 11, 16, 21, 22, 35, 39, 54, 70, 71, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136], "from_default": 136, "from_docu": [135, 136], "from_exist": 129, "from_finetun": [90, 91, 92], "from_numpi": 118, "from_peft": [53, 58, 76, 81], "from_pretrain": [115, 116], "from_raw_model": 81, "from_templ": 135, "front": [113, 114], "fsdp": 69, "fsdp_config": 69, "fsdp_min_num_param": 69, "fsdp_transformer_layer_cls_to_wrap": 69, "fsdpoption": 69, "full": [114, 115, 124, 127, 128, 129], "full_determin": 69, "function": [11, 70, 96, 114, 115, 122, 123, 127, 132, 135, 136], "fundament": 123, "futur": 121, "g": 122, "gain": [119, 127], "gather": 11, "gb": [109, 114], "ge": 116, "geluactiv": [115, 116], "gemma": 132, "gemma2": 132, "gener": [24, 32, 39, 45, 105, 110, 113, 115, 116, 123, 125, 128, 129], "genu": 132, "geoffrei": [105, 121], "geometr": 118, "get": [10, 11, 22, 60, 65, 70, 71, 77, 91, 96, 97, 105, 111, 115, 116, 118, 119, 121, 123, 127, 129, 132], "get_detailed_exampl": [90, 94, 95], "get_detailed_input": [0, 20, 22], "get_detailed_instruct": [0, 20, 21, 22], "get_local_scor": [0, 7, 8, 11], "get_model": [49, 50, 63, 68, 71, 129], "get_prompt": 136, "get_target_devic": [0, 20, 21, 22], "get_task": [128, 130], "get_templ": 136, "get_text_embed": 136, "giant": 132, "git": 104, "github": [35, 104, 111, 114, 129, 135, 136], "give": [116, 125, 134, 135, 136], "given": [10, 32, 94, 97, 114, 119, 123, 127, 130, 135, 136], "global": [105, 121, 123, 136], "go": [115, 118, 123, 129, 130, 132, 134, 136], "goal": [129, 130], "good": [125, 127, 134], "googl": 35, "got": 105, "goto": 130, "gpt": [39, 105, 113, 121, 134, 135, 136], "gpu": [21, 22, 98, 99, 100, 113, 115, 123, 124, 125, 127, 129, 130], "gpucloneropt": 122, "gpumultiplecloneropt": [121, 122], "gpuresourc": 122, "gpuresourcesvector": 122, "grade": [119, 127], "gradient": [17, 60, 65, 70, 77], "gradient_accumulation_step": 69, "gradient_checkpoint": 69, "gradient_checkpointing_en": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "gradient_checkpointing_kwarg": 69, "grain": 116, "gram": 113, "grammi": [105, 121], "granular": [114, 135, 136], "granularityi": 114, "graph": 123, "great": [122, 123, 125, 134, 136], "greater": 123, "greater_is_bett": 69, "ground": [105, 125, 127], "ground_truth": [105, 119, 127, 132], "group": [10, 11, 109, 113, 123], "group_by_length": 69, "group_siz": 11, "guarante": [123, 125], "h5py": 125, "h_p": 116, "h_q": 116, "ha": [35, 113, 114, 115, 116, 118, 123, 125], "had": 105, "half": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101], "half_precision_backend": 69, "hallucin": 136, "ham": 123, "hand": 111, "handl": 115, "happen": 135, "happi": 113, "hard": 135, "hardwar": [98, 99, 100], "hash": 123, "hashtabel": 123, "have": [24, 105, 113, 115, 118, 119, 121, 123, 127, 128, 129, 132, 135, 136], "hawaii": 118, "hdf5": 125, "he": 105, "head_multi": 81, "head_typ": 81, "hear": 35, "heavi": 116, "hello": 136, "help": [24, 134, 136], "helper": 70, "her": [105, 118, 121], "here": [105, 111, 115, 116, 121, 124, 125, 130, 135, 136], "heterogen": [24, 27], "hf": [10, 16, 71, 91, 92, 93, 94, 96, 97, 115, 129, 130], "hf_subset": 128, "hi": [32, 39, 105, 118, 121], "hidden": [60, 65, 70, 77, 91, 96, 97, 115, 116], "hidden_s": 97, "hidden_st": 70, "hierarch": 123, "high": [122, 127, 136], "higher": [105, 113, 123], "highli": 130, "hinton": [105, 121], "hit": 119, "hnsw": 123, "hold": 45, "holidai": 118, "hollywood": [105, 121], "hopefulli": 132, "hot": 113, "hotpot": 134, "hotpotqa": [128, 129], "hous": 134, "how": [13, 19, 45, 105, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 132, 134, 135, 136], "howev": 113, "http": [35, 104, 125, 135], "hub": [10, 21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 129, 130], "hub_always_push": 69, "hub_model_id": 69, "hub_private_repo": 69, "hub_strategi": 69, "hub_token": 69, "hubstrategi": 69, "huge": [113, 135], "huggingfac": [21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 114, 127, 135, 136], "huggingfaceembed": [135, 136], "human": [24, 113, 129], "i": [11, 13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 91, 92, 105, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "i_truth": 125, "ic": 134, "icl": [49, 50, 51, 58, 59, 60, 61, 62, 94, 114], "icl_suffix_str": 58, "iclllmembedd": [90, 95], "icon": [105, 121], "id": [70, 97, 114, 119, 121, 132], "idcg": [119, 127], "idcg_p": [119, 127], "idea": [105, 129], "ideal": [119, 127], "ident": [122, 132], "idf": 113, "idx": [127, 132], "iflytek": 130, "ignore_data_skip": 69, "ignore_identical_id": 27, "imag": 113, "imagenet": [105, 121], "imdbclassif": 129, "implement": [21, 22, 60, 65, 70, 77, 96, 115, 130], "import": [105, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "imposs": 24, "improv": [45, 113, 116, 128], "in_featur": [115, 116], "includ": [111, 113, 134], "include_inputs_for_metr": 69, "include_num_input_tokens_seen": 69, "include_tokens_per_second": 69, "incom": 123, "increas": 123, "indeci": 105, "independ": [21, 22], "index": [10, 59, 105, 118], "index_cpu_to_all_gpu": [121, 122], "index_cpu_to_gpu": 122, "index_cpu_to_gpu_multipl": 122, "index_factori": [121, 122, 127, 132], "index_gpu": 122, "indexflat": 124, "indexflatip": [122, 123, 134], "indexflatl2": [123, 125, 136], "indexhnswflat": [123, 125], "indexivfflat": [123, 125], "indexivfpq": 124, "indexivfscalarquant": 124, "indexlsh": 125, "indexpq": [124, 125], "indexscalarquant": [124, 125], "indic": [105, 118, 119, 121, 124, 135], "industri": 122, "ineffici": 113, "infer": [0, 21, 22, 70, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 111, 113, 114, 127, 132], "inform": [11, 24, 27, 32, 42, 105, 113, 119, 125, 127, 134, 135, 136], "infti": 118, "ingredi": 134, "init": 136, "initi": [114, 122, 128, 130, 135, 136], "inner": [60, 65, 70, 77, 105, 116, 123, 127], "innov": [105, 121, 134], "inplac": [115, 116], "input": [10, 11, 13, 16, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 93, 94, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 121, 129, 130, 132, 135], "input_id": [70, 115], "input_queu": [21, 22], "input_was_str": 115, "inspect": 10, "instal": [105, 113, 114, 119, 121, 123, 124, 125, 127, 132, 134, 135, 136], "instanc": [12, 18, 55, 61, 66, 71, 78, 83, 88, 119, 127, 128], "instead": [100, 115, 124, 135], "instruct": [10, 21, 22, 59, 91, 93, 94, 96, 97, 98, 99, 100, 101, 109, 113, 114, 130], "instruction_format": [21, 22, 94], "int": [9, 10, 11, 15, 16, 17, 21, 22, 53, 54, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 82, 87, 93, 94, 96, 97, 98, 99, 100, 101, 114, 119, 127, 130, 132], "int32vector": 122, "integ": [21, 22, 125], "integr": [116, 136], "intellig": [111, 114], "interact": 116, "interest": [111, 118, 119], "interg": 124, "intermedi": [115, 116], "intermediate_act_fn": [115, 116], "intern": [21, 22], "intersect": [118, 125], "intersect1d": [119, 125, 127, 132], "intervalstrategi": 69, "intervent": 24, "introduc": [45, 114, 118, 121, 124, 128], "intuit": 113, "invalid": 11, "inventor": 105, "invert": [123, 124], "invok": 135, "involv": [119, 127], "ip": 124, "ir": 27, "iron": [105, 121], "irrelev": [129, 130], "is_train": 121, "isin": [119, 127, 132], "isinst": 115, "issu": [109, 114, 118], "italian": 134, "item": [116, 118, 119], "iter": [21, 93, 94, 96, 97, 98, 99, 100, 101, 105], "iterabledataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "its": [105, 109, 114, 116, 121, 122, 124, 127, 128, 129, 130, 134, 135], "itself": 122, "ivf": 123, "ivfflatl2": 125, "j": [105, 116, 118, 119, 127, 132], "ja": 35, "jaccard_similar": 118, "jackson": [105, 121], "japanes": 134, "japenes": 134, "jdreview": 130, "jit_mode_ev": 69, "jjiga": 134, "joe": 134, "joint": 116, "jr": [105, 121], "json": [45, 128], "just": [70, 116, 118, 121, 122, 123, 128, 129], "k": [105, 119, 121, 123, 124, 125, 127, 129, 130, 132], "k_valu": [27, 32, 35, 39, 42], "kd_loss_typ": [11, 60, 65, 69, 70, 77], "keepdim": 115, "kei": [105, 113, 114, 115, 116, 134, 135, 136], "kernal": 122, "kernel": [121, 122], "key_embed": 114, "keyword": 111, "kg_co2_emiss": 128, "kind": [113, 134], "kitti": 113, "kl_div": [11, 60, 65, 69, 77], "knn": 121, "knock": 35, "know": [105, 115, 134, 135, 136], "knowledg": [11, 17, 60, 65, 70, 77, 82, 105, 111, 121, 136], "knowledge_distil": [9, 15, 58], "known": [32, 45, 105, 121, 123, 128], "korean": 134, "kwarg": [10, 11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 130], "l2": [116, 118, 124], "l6": 113, "label": [32, 105, 119, 127, 129, 130, 132], "label_nam": 69, "label_pad_token_id": 16, "label_smoothing_factor": 69, "lambda": 105, "lambdalr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "land": 123, "langchain_commun": 135, "langchain_cor": 135, "langchain_huggingfac": 135, "langchain_openai": 135, "languag": [24, 32, 35, 39, 42, 45, 109, 113, 114, 118, 128, 129, 132, 135], "larg": [27, 42, 45, 105, 109, 113, 114, 115, 116, 118, 122, 123, 125, 128, 132, 136], "larger": [113, 118, 123], "largest": [130, 132], "last": [60, 65, 69, 70, 77, 91, 96, 97, 115, 122, 125, 129], "last_hidden_st": [60, 65, 70, 77, 96, 115], "last_token": [60, 77], "late": 116, "later": 135, "latest": [45, 121, 122, 128], "latn": 128, "laxic": 97, "layer": [82, 99, 100, 115, 116, 123, 132], "layernorm": [115, 116], "layerwis": [49, 73, 74, 81, 82, 83, 84, 99, 132], "layerwisellmrerank": [90, 102], "lcqmc": 130, "lead": [105, 118, 121, 122, 132], "leaderboard": [45, 128], "learn": [105, 114, 115, 118, 119, 121, 127, 135, 136], "learnabl": 116, "learning_r": 69, "legendari": [105, 121], "len": [105, 113, 116, 118, 119, 125, 127, 132, 136], "length": [21, 22, 69, 93, 94, 96, 97, 98, 99, 100, 101, 105, 113, 114, 116, 121, 127, 132], "length_column_nam": 69, "lengthi": 39, "less": [125, 132], "let": [105, 113, 115, 118, 121, 122, 128, 129, 132, 134, 135, 136], "lex": 116, "lexic": [97, 116], "lexical_weight": [97, 114, 116], "lexical_weights_1": 97, "lexical_weights_2": 97, "li": [105, 121], "librari": 113, "licens": 113, "light": 100, "lightweight": [100, 132], "lightweightllmrerank": [90, 102], "like": [39, 93, 98, 99, 100, 105, 113, 114, 121, 127, 128, 135, 136], "limit": [113, 123], "line": [105, 121, 127], "linear": [69, 71, 97, 115, 116, 123], "lingual": [114, 135, 136], "link": [129, 130], "linux": [122, 123, 124, 125], "list": [10, 11, 13, 16, 17, 19, 21, 22, 32, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 72, 76, 77, 79, 81, 82, 84, 89, 91, 93, 94, 96, 97, 98, 99, 100, 101, 105, 115, 119, 123, 127, 128, 129, 130, 132, 134], "liter": [21, 22, 97], "littl": 105, "live": [132, 134], "ll": [113, 119, 121, 122, 125, 128], "llama": 136, "llama_index": 136, "llm": [16, 24, 93, 98, 99, 100, 135, 136], "llmembedd": 114, "load": [10, 12, 16, 18, 21, 22, 55, 61, 66, 71, 78, 83, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 113, 114, 115, 121, 125, 128, 129, 130, 135, 136], "load_best_model_at_end": 69, "load_data": 136, "load_data_col": [0, 7, 8, 12, 14, 18], "load_dataset": [127, 132], "load_tokenizer_and_model": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train_dataset": [0, 7, 8, 12, 14, 18, 49, 50, 51, 57, 61], "loader": [1, 135], "lobster": 134, "local": [11, 21, 22, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 121, 123, 127, 135], "local_rank": 69, "locat": 134, "log_2": [119, 127], "log_level": 69, "log_level_replica": 69, "log_on_each_nod": 69, "logging_dir": 69, "logging_first_step": 69, "logging_nan_inf_filt": 69, "logging_step": 69, "logging_strategi": 69, "logist": [129, 130], "logit": [54, 87], "long": [24, 39, 114, 116, 125, 134], "longer": [123, 125], "look": [39, 105, 113, 118, 125, 128, 129], "loop": [10, 121], "lora_alpha": [53, 58, 76, 81], "lora_dropout": [53, 58, 76, 81], "lora_rank": [53, 58, 76, 81], "lose": [118, 125], "loss": [11, 13, 17, 19, 60, 65, 70, 77, 125], "lot": [113, 136], "love": [113, 115], "low": [113, 124], "lower": 136, "lr_scheduler_kwarg": 69, "lr_scheduler_typ": 69, "lrlm": 114, "lsh": 123, "lstm": 113, "luxuri": 134, "m": [24, 27, 32, 35, 39, 42, 45, 116, 118, 119, 122, 123, 124, 125, 127, 132, 134], "m3": [24, 27, 32, 35, 39, 42, 49, 50, 63, 69, 70, 71, 72, 97, 132, 135, 136], "m3_kd_loss": [11, 70], "m3embedd": [90, 95], "machin": [42, 115, 127, 129, 135, 136], "made": 118, "magic": 135, "magnitud": 118, "mai": [118, 123, 135], "main": [45, 119, 127, 128, 129, 130], "main_scor": 128, "mainli": 123, "maintain": [114, 121, 122, 123], "make": [24, 113, 115, 116, 119, 121, 122, 123, 127, 129, 134, 135], "man": [105, 121], "manhattan": 134, "mani": 111, "manual": 125, "map": [109, 113, 114, 124, 129, 130], "map_at_1": 128, "map_at_10": 128, "map_at_100": 128, "map_at_1000": 128, "map_at_20": 128, "map_at_3": 128, "map_at_5": 128, "marco": [42, 127, 132], "markdown": [27, 32, 35, 39, 42], "marvel": [105, 121], "masa": 134, "masayoshi": 134, "mask": [60, 65, 70, 77, 96], "massiv": [45, 128], "massiveintentclassif": 129, "massivescenarioclassif": 129, "match": [97, 113, 116, 135, 136], "mathc": 116, "matrix": [60, 65, 70, 77, 116], "max": [116, 119, 124, 127, 132], "max_": 116, "max_example_num_per_dataset": [9, 15, 58], "max_grad_norm": 69, "max_len": 9, "max_length": [10, 16, 21, 22, 59, 93, 94, 96, 97, 98, 99, 100, 101, 114, 115, 116], "max_passage_length": 97, "max_query_length": 97, "max_step": 69, "maxim": 123, "maximum": [21, 22, 93, 94, 96, 97, 98, 99, 100, 101, 116, 119, 127, 132, 135, 136], "mb": [109, 114], "mc4": 39, "md": [27, 32, 35, 39, 42, 129, 130], "mean": [105, 115, 118, 119, 123, 127, 129, 130], "measur": [118, 119, 127, 129, 130], "meat": 134, "mechan": 118, "medicalretriev": 130, "medrxivclusteringp2p": 129, "medrxivclusterings2": 129, "melanoleuca": 132, "member": 132, "memori": [113, 123, 124, 125], "menu": 134, "messag": 134, "metadata": 135, "method": [0, 1, 7, 8, 14, 20, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86, 90, 95, 102, 113, 115, 116, 118, 123, 134, 135], "metric": [105, 118, 121, 123, 124, 125, 127, 128, 129, 130, 132], "metric_for_best_model": 69, "metric_inner_product": [121, 127, 132], "metric_l2": [122, 124, 125], "michael": [105, 121], "microsoft": 42, "midtown": 134, "might": [105, 113, 121, 122], "million": 121, "min": [119, 127, 132], "mind": 135, "mindsmallrerank": 129, "mini": [129, 130, 134, 135, 136], "minicpm": 132, "minilm": 113, "minimum": 119, "minut": 105, "miracl": 23, "miracl_eval_result": 32, "mitr": 134, "mkqa": 23, "mkqa_eval_result": 35, "mldr": 23, "mldr_eval_result": 39, "mm": 118, "mmarcorerank": 130, "mmarcoretriev": 130, "modal": 136, "mode": 104, "model": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 104, 105, 109, 110, 115, 116, 118, 119, 121, 123, 127, 128, 129, 132, 134, 135, 136], "model_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "model_cache_dir": 24, "model_card": [129, 130], "model_class": [91, 92], "model_init": [13, 19, 56, 62, 67, 72, 79, 84, 89], "model_nam": [128, 129, 130, 135, 136], "model_name_or_path": [9, 15, 21, 22, 53, 58, 69, 71, 76, 81, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 130], "model_output": 115, "model_revis": [128, 129], "model_typ": [9, 76, 81], "modern": [27, 113], "modifi": [135, 136], "modul": [13, 19, 56, 62, 67, 72, 79, 84, 89], "modulelist": [115, 116], "modules_to_sav": [53, 58, 76, 81], "more": [105, 109, 111, 113, 114, 115, 118, 123, 125, 132, 134, 135, 136], "morgan": [105, 121], "most": [105, 109, 113, 118, 128, 134, 135, 136], "mp_paramet": 69, "mrr": [105, 129, 130], "mrr_at_1": 128, "mrr_at_10": 128, "mrr_at_100": 128, "mrr_at_1000": 128, "mrr_at_20": 128, "mrr_at_3": 128, "mrr_at_5": 128, "mrr_init": 132, "mrr_rerank": 132, "msmarco": [23, 127, 128, 129, 132], "msmarco_eval_result": 42, "mteb": [23, 109], "mteb_eval_result": 45, "mteb_main_en": 129, "mteb_vers": 128, "mtopdomainclassif": 129, "mtopintentclassif": 129, "much": 125, "mul": 116, "multi": [10, 21, 22, 59, 97, 114, 123, 135, 136], "multilingu": [32, 39, 114, 116, 132], "multilingualsenti": 130, "multimod": 136, "multipl": [21, 22, 116, 119, 136], "multiscal": 136, "music": [105, 121], "must": 70, "my": 118, "mymodel": 130, "n": [9, 94, 113, 114, 115, 116, 118, 119, 121], "name": [21, 22, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 124], "namespac": [127, 132], "nanswer": 121, "narr": [105, 121], "narrow": 134, "nativ": [32, 132], "natur": [35, 42, 113, 118, 128, 135], "nauc_map_at_1000_diff1": 128, "nauc_map_at_1000_max": 128, "nauc_map_at_1000_std": 128, "nauc_map_at_100_diff1": 128, "nauc_map_at_100_max": 128, "nauc_map_at_100_std": 128, "nauc_map_at_10_diff1": 128, "nauc_map_at_10_max": 128, "nauc_map_at_10_std": 128, "nauc_map_at_1_diff1": 128, "nauc_map_at_1_max": 128, "nauc_map_at_1_std": 128, "nauc_map_at_20_diff1": 128, "nauc_map_at_20_max": 128, "nauc_map_at_20_std": 128, "nauc_map_at_3_diff1": 128, "nauc_map_at_3_max": 128, "nauc_map_at_3_std": 128, "nauc_map_at_5_diff1": 128, "nauc_map_at_5_max": 128, "nauc_map_at_5_std": 128, "nauc_mrr_at_1000_diff1": 128, "nauc_mrr_at_1000_max": 128, "nauc_mrr_at_1000_std": 128, "nauc_mrr_at_100_diff1": 128, "nauc_mrr_at_100_max": 128, "nauc_mrr_at_100_std": 128, "nauc_mrr_at_10_diff1": 128, "nauc_mrr_at_10_max": 128, "nauc_mrr_at_10_std": 128, "nauc_mrr_at_1_diff1": 128, "nauc_mrr_at_1_max": 128, "nauc_mrr_at_1_std": 128, "nauc_mrr_at_20_diff1": 128, "nauc_mrr_at_20_max": 128, "nauc_mrr_at_20_std": 128, "nauc_mrr_at_3_diff1": 128, "nauc_mrr_at_3_max": 128, "nauc_mrr_at_3_std": 128, "nauc_mrr_at_5_diff1": 128, "nauc_mrr_at_5_max": 128, "nauc_mrr_at_5_std": 128, "nauc_ndcg_at_1000_diff1": 128, "nauc_ndcg_at_1000_max": 128, "nauc_ndcg_at_1000_std": 128, "nauc_ndcg_at_100_diff1": 128, "nauc_ndcg_at_100_max": 128, "nauc_ndcg_at_100_std": 128, "nauc_ndcg_at_10_diff1": 128, "nauc_ndcg_at_10_max": 128, "nauc_ndcg_at_10_std": 128, "nauc_ndcg_at_1_diff1": 128, "nauc_ndcg_at_1_max": 128, "nauc_ndcg_at_1_std": 128, "nauc_ndcg_at_20_diff1": 128, "nauc_ndcg_at_20_max": 128, "nauc_ndcg_at_20_std": 128, "nauc_ndcg_at_3_diff1": 128, "nauc_ndcg_at_3_max": 128, "nauc_ndcg_at_3_std": 128, "nauc_ndcg_at_5_diff1": 128, "nauc_ndcg_at_5_max": 128, "nauc_ndcg_at_5_std": 128, "nauc_precision_at_1000_diff1": 128, "nauc_precision_at_1000_max": 128, "nauc_precision_at_1000_std": 128, "nauc_precision_at_100_diff1": 128, "nauc_precision_at_100_max": 128, "nauc_precision_at_100_std": 128, "nauc_precision_at_10_diff1": 128, "nauc_precision_at_10_max": 128, "nauc_precision_at_10_std": 128, "nauc_precision_at_1_diff1": 128, "nauc_precision_at_1_max": 128, "nauc_precision_at_1_std": 128, "nauc_precision_at_20_diff1": 128, "nauc_precision_at_20_max": 128, "nauc_precision_at_20_std": 128, "nauc_precision_at_3_diff1": 128, "nauc_precision_at_3_max": 128, "nauc_precision_at_3_std": 128, "nauc_precision_at_5_diff1": 128, "nauc_precision_at_5_max": 128, "nauc_precision_at_5_std": 128, "nauc_recall_at_1000_diff1": 128, "nauc_recall_at_1000_max": 128, "nauc_recall_at_1000_std": 128, "nauc_recall_at_100_diff1": 128, "nauc_recall_at_100_max": 128, "nauc_recall_at_100_std": 128, "nauc_recall_at_10_diff1": 128, "nauc_recall_at_10_max": 128, "nauc_recall_at_10_std": 128, "nauc_recall_at_1_diff1": 128, "nauc_recall_at_1_max": 128, "nauc_recall_at_1_std": 128, "nauc_recall_at_20_diff1": 128, "nauc_recall_at_20_max": 128, "nauc_recall_at_20_std": 128, "nauc_recall_at_3_diff1": 128, "nauc_recall_at_3_max": 128, "nauc_recall_at_3_std": 128, "nauc_recall_at_5_diff1": 128, "nauc_recall_at_5_max": 128, "nauc_recall_at_5_std": 128, "navig": 123, "nbit": [123, 124, 125], "ndarrai": [21, 22, 93, 94, 96, 97, 130], "ndcg": [129, 130], "ndcg_at_1": 128, "ndcg_at_10": [27, 32, 39, 42, 128], "ndcg_at_100": 128, "ndcg_at_1000": 128, "ndcg_at_20": 128, "ndcg_at_3": 128, "ndcg_at_5": 128, "ndcg_p": [119, 127], "ndcg_score": [119, 127, 132], "nearest": [122, 123, 124], "neat": 121, "need": [113, 114, 115, 116, 121, 122, 123, 125, 129, 130, 134, 136], "neftune_noise_alpha": 69, "neg": [11, 60, 65, 70, 77, 119, 127], "neg_scor": [10, 16], "negative_passag": 39, "negatives_cross_devic": [11, 60, 65, 69, 70, 77], "neighbor": [122, 123, 124, 125], "network": [105, 113, 121], "neural": [105, 113, 121], "new": [24, 39, 114, 129, 132, 134, 135], "new_data": 124, "new_id": 132, "new_scor": 132, "new_templ": 136, "new_text": 132, "next": [105, 124, 128], "nfcorpu": [45, 128, 129], "ng": [105, 121], "ngpu": 122, "nine": 134, "nlist": [123, 124, 125], "nlp": [27, 45, 115, 128], "nn": [115, 118], "no_cuda": 69, "no_in_batch_neg_flag": [11, 70], "node": 123, "node_pars": 136, "non": 136, "none": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 54, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 114, 115], "norm": [116, 118], "normal": [21, 22, 60, 65, 70, 77, 93, 94, 96, 97, 98, 99, 100, 101, 115, 116, 118, 119, 124, 127], "normalize_embed": [21, 60, 65, 69, 70, 77, 91, 93, 94, 96, 97, 113, 135], "note": [10, 59, 105, 115, 123, 128, 129, 130, 132, 136], "notebook": [121, 122, 124, 125, 127, 129], "notic": 24, "notimplementederror": [21, 60, 61, 65, 70, 77, 96], "noun": 118, "now": [24, 105, 115, 118, 121, 122, 123, 124, 128, 129, 132, 134, 135, 136], "np": [21, 93, 94, 96, 97, 113, 119, 121, 122, 123, 124, 125, 127, 130, 132, 134], "nprob": [123, 125], "nprobe": [123, 125], "nq": [128, 129], "nqueri": 93, "nrespons": 58, "nsw": 123, "ntotal": [121, 127, 132, 134], "nuber": 123, "null": 128, "num": 70, "num_process": [10, 59], "num_train_epoch": 69, "num_work": [98, 99], "number": [10, 11, 21, 59, 93, 94, 96, 97, 98, 99, 100, 101, 119, 121, 123, 124, 127, 129, 130, 132, 135, 136], "numer": 118, "numpi": [21, 22, 91, 93, 94, 96, 113, 115, 119, 121, 122, 123, 124, 125, 127, 132, 134], "nvidia": [121, 122, 123, 124, 125], "o": [113, 116, 134, 135, 136], "o1": 69, "object": [10, 21, 22, 122, 124, 127, 136], "obtain": 115, "obviou": 125, "ocnli": 130, "offer": 134, "offici": 113, "omakas": 134, "on_epoch_end": [0, 7, 8, 10], "onc": [105, 121], "one": [21, 22, 105, 111, 113, 121, 124, 125, 128, 135, 136], "onli": [11, 13, 19, 21, 22, 32, 49, 50, 53, 54, 55, 56, 58, 60, 61, 65, 73, 76, 77, 78, 81, 82, 83, 84, 88, 89, 93, 96, 98, 99, 100, 101, 105, 113, 116, 118, 119, 121, 122, 123, 124, 129, 135, 136], "onlineshop": 130, "open": [35, 128, 135, 136], "openai": [105, 121, 134, 135, 136], "openai_api_kei": [113, 134, 135, 136], "opposit": 118, "optim": [13, 19, 56, 62, 67, 69, 72, 79, 84, 89, 125], "optim_arg": 69, "optim_target_modul": 69, "optimizernam": 69, "optimum": 123, "option": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 135, 136], "order": [105, 113, 119, 123, 127, 129], "org": 135, "origin": 124, "ortomar": 134, "other": [105, 113, 121, 125, 127, 129], "otherwis": [11, 13, 19, 21, 22, 70, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 114, 121, 130], "our": [24, 27, 32, 35, 39, 42, 45, 105, 111, 121, 125, 127, 128, 132, 134, 135, 136], "out": [16, 24, 60, 65, 70, 77, 105, 114, 127, 129, 132, 134], "out_featur": [115, 116], "outdoor": 134, "output": [11, 13, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 91, 93, 94, 96, 97, 115, 116, 118, 132], "output_1": 116, "output_2": 116, "output_dir": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 69, 70, 77], "output_fold": [128, 129, 130], "output_path": [129, 130], "over": 114, "overcom": 113, "overlap": [135, 136], "overrid": [13, 19], "overwrit": [24, 27, 32, 35, 39, 42], "overwrite_output_dir": 69, "own": [113, 121], "p": [115, 116, 118, 119, 127, 132], "p_embed": 114, "p_rep": [11, 60, 65, 70, 77, 97], "packag": [104, 113, 115, 116, 128, 129, 130, 134, 135, 136], "pad": [10, 16, 59, 60, 65, 70, 77, 115], "pad_to_multiple_of": [9, 10, 15, 16, 58, 59], "padding_idx": [115, 116], "paddingstrategi": [10, 16, 59], "page": [128, 129, 130, 135], "pair": [16, 17, 22, 35, 39, 54, 82, 87, 97, 98, 99, 100, 101, 129, 130, 132], "panda": 132, "panthera": 132, "paper": [114, 135, 136], "paragraph": 39, "parallel": [113, 115], "paramet": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 70, 71, 77, 78, 82, 83, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 109, 114, 123, 124, 125, 132, 136], "parser": 136, "part": [114, 125, 127, 128, 134, 135, 136], "particular": 135, "particularli": 136, "partit": [123, 124], "pass": [13, 16, 17, 19, 82, 122, 130], "passag": [11, 21, 22, 42, 60, 65, 70, 77, 93, 94, 96, 97, 98, 99, 100, 101, 105, 114, 116, 118, 121, 127, 132, 134], "passage_instruction_for_rerank": [9, 22, 98, 99, 100, 101], "passage_instruction_for_retriev": [15, 58], "passage_instruction_format": [9, 15, 22, 58, 98, 99, 100, 101], "passage_max_len": [9, 10, 15, 16, 58, 59], "passage_max_length": [21, 93, 94, 96, 97], "passiv": 69, "past": [129, 130], "past_index": 69, "pasta": 134, "path": [10, 16, 21, 22, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 121, 127, 129, 130, 135], "path_to_model": 130, "pattern": 113, "pawsx": 130, "pdf": 135, "peft": [98, 99, 100], "peft_model_path": [53, 58], "peft_path": [98, 99, 100], "peopl": [105, 113, 121, 136], "pepperoni": 134, "per": [21, 22, 124, 134], "per_device_eval_batch_s": 69, "per_device_train_batch_s": [10, 59, 69], "per_gpu_eval_batch_s": 69, "per_gpu_train_batch_s": 69, "perfect": 123, "perfectli": [119, 127], "perform": [11, 17, 21, 22, 24, 27, 32, 35, 39, 42, 45, 70, 82, 91, 92, 93, 96, 97, 98, 99, 100, 101, 105, 109, 114, 115, 118, 119, 125, 127, 128, 129, 132, 136], "person": [105, 113], "peter": 118, "phase": [124, 125], "pho": 134, "phrase": [105, 113], "pick": [99, 100], "pip": [105, 113, 114, 115, 116, 119, 121, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "pipelin": [45, 127, 128, 129, 132, 135, 136], "pitt": [105, 121], "pixel": 113, "pizza": 134, "place": 118, "plai": [105, 113, 121, 127], "pleas": [111, 129, 132, 134, 135], "plenti": 113, "point": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101, 123], "pool": [21, 22, 60, 65, 70, 77, 90, 91, 93, 94, 95, 96, 97, 115], "pooler": [115, 116], "pooling_method": [91, 96, 97, 115, 130], "pop": [105, 121], "popular": [109, 123, 125, 129, 136], "portion": 113, "pos_scor": [10, 16], "posit": [119, 127, 132], "position_embed": [115, 116], "positive_passag": 39, "possess": 132, "possibl": [113, 116, 119, 123, 127], "pow": 118, "power": [105, 113, 134, 135, 136], "pq": 124, "practic": [118, 119, 121], "pre": [54, 82, 87], "prec": 119, "precis": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101, 118, 129, 130, 132, 135], "precision_at_1": 128, "precision_at_10": 128, "precision_at_100": 128, "precision_at_1000": 128, "precision_at_20": 128, "precision_at_3": 128, "precision_at_5": 128, "pred": [105, 119, 127, 132], "pred_hard_encod": [119, 127, 132], "pred_hard_encodings_rerank": 132, "predict": [105, 119, 125, 127], "prediction_loss_onli": 69, "prefer": [24, 27, 32, 35, 39, 42, 45, 118, 123, 134], "prefix": 94, "premium": 134, "prepar": [16, 130], "preprocess": [123, 132], "preprocess_logits_for_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "present": 134, "preserv": 136, "pretrainedmodel": [13, 19, 54, 56, 62, 67, 72, 79, 82, 84, 87, 89], "pretrainedtoken": [10, 12, 16, 18, 55, 59, 61, 66, 71, 78, 83, 88], "pretrainedtokenizerbas": [10, 13, 16, 19, 56, 59, 62, 67, 72, 79, 84, 89], "pretti": [105, 125, 136], "previous": 132, "price": 134, "primal": 118, "print": [105, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 129, 132, 134, 135, 136], "prior": 136, "problem": [123, 136], "proce": 114, "process": [10, 11, 12, 18, 21, 22, 42, 59, 97, 118, 123, 127, 128, 129, 135], "process_index": [10, 59], "process_target_func": 21, "produc": [105, 121, 122], "product": [60, 65, 70, 77, 105, 113, 116, 123, 127], "productquant": 124, "professor": [105, 121], "profici": 132, "program": 134, "project": [105, 116, 121], "promot": 125, "prompt": [98, 99, 100, 134, 135, 136], "prompt_templ": 136, "prompttempl": 136, "promt": 136, "provid": [21, 24, 27, 32, 35, 39, 42, 45, 70, 91, 92, 94, 96, 111, 113, 115, 122, 128, 129, 130, 134, 135], "proxim": 123, "psg": 16, "pt": [10, 16, 59, 115, 116, 127, 132], "public": [105, 121], "publish": [113, 114], "purpu": 113, "pursu": [105, 121], "push_back": 122, "push_to_hub": 69, "push_to_hub_model_id": 69, "push_to_hub_organ": 69, "push_to_hub_token": 69, "put": 135, "pypdf": 135, "pypdfload": 135, "python": [24, 27, 32, 35, 39, 42, 45], "pytorch": [121, 122, 123, 124, 125], "q": [39, 116, 119, 121, 127, 135, 136], "q545186": 35, "q_embed": [114, 127, 132, 134], "q_mask": 70, "q_rep": [11, 60, 65, 70, 77, 97], "qa": [24, 114], "qa_recall_at_20": 35, "qbqtc": 130, "qry": 16, "qry_encod": 16, "qt": 116, "qt_8bit": [124, 125], "qtype": [124, 125], "qualiti": [105, 109, 113, 119, 123, 127, 134], "quantiz": [121, 123], "queri": [10, 11, 16, 17, 21, 22, 35, 39, 59, 60, 65, 70, 77, 82, 91, 93, 94, 96, 97, 98, 99, 100, 101, 105, 113, 114, 115, 116, 119, 122, 123, 124, 125, 127, 129, 130, 132, 134, 136], "queries_embed": 105, "query_embed": [105, 114, 121, 127, 132], "query_engin": 136, "query_id": 39, "query_instruction_for_rerank": [9, 22, 98, 99, 100, 101], "query_instruction_for_retriev": [15, 21, 58, 91, 93, 94, 96, 97, 105, 114, 118, 121, 127, 130, 132, 134], "query_instruction_format": [9, 15, 21, 22, 58, 91, 93, 94, 96, 97, 98, 99, 100, 101], "query_max_len": [9, 10, 15, 16, 58, 59], "query_max_length": [21, 22, 93, 94, 96, 97, 98, 99, 100, 101], "query_s": [127, 132], "query_str": 136, "question": [35, 39, 42, 114, 134, 135, 136], "queue": [21, 22], "quick": [122, 124, 128], "quickli": [111, 135], "quoraretriev": [128, 129], "r": [122, 125, 129], "rag": 111, "rais": [10, 11, 16, 21, 22, 60, 61, 65, 70, 77, 91, 92, 96], "ram": 123, "ramen": 134, "randint": 118, "random": [10, 59, 122, 123, 124, 134], "randomli": 39, "rang": [45, 105, 113, 118, 119, 122, 125, 127, 128, 132], "rank": [45, 109, 119, 127, 128, 129, 130], "rank_i": [119, 127], "rapper": [105, 121], "ratio": [100, 119, 132], "raw": [10, 59], "raw_model": 116, "raw_peft": [53, 58, 76, 81], "ray_scop": 69, "re": [118, 119, 122, 125, 127, 134], "reach": 113, "read": [42, 136], "read_index": [121, 127], "reader": 136, "readi": [16, 135], "readm": [129, 130], "real": [42, 45, 118, 125, 128], "reason": [109, 114, 123], "recal": 125, "recall_at_1": 128, "recall_at_10": 128, "recall_at_100": [27, 32, 42, 128], "recall_at_1000": 128, "recall_at_20": 128, "recall_at_3": 128, "recall_at_5": 128, "recalls_init": 132, "recalls_rerank": 132, "receiv": [105, 121], "reciproc": [105, 119, 127], "recommend": [21, 22, 130, 134], "recommended_act": 134, "record": [105, 121], "recursivecharactertextsplitt": 135, "red": 134, "redditclust": 129, "redditclusteringp2p": 129, "reduc": 124, "reduct": [124, 125], "refer": [129, 130, 134, 135, 136], "refresh": [10, 129, 130], "refresh_epoch": [0, 7, 8, 10], "regress": [129, 130], "rel": [119, 125], "rel_i": [119, 127], "relat": [113, 114, 118, 122, 134, 135], "relationship": [113, 136], "relax": [129, 134], "releas": [32, 109, 110, 113, 129], "relev": [32, 97, 98, 99, 100, 105, 114, 116, 118, 119, 121, 127, 129, 130, 132, 134], "reliabl": 134, "relu": 116, "remov": [123, 129], "remove_unused_column": 69, "renown": [105, 121, 134], "repeat": [105, 129], "replac": 124, "replic": 122, "repo": [111, 125, 135, 136], "report_to": 69, "repositori": 104, "repres": [105, 113, 114, 118, 119, 121, 127, 132, 134], "represent": [11, 60, 65, 70, 77, 116, 124, 135], "reproduc": [113, 129], "reproduct": 127, "request": 125, "requir": [115, 116, 122, 123, 134, 135, 136], "rerank": [0, 7, 9, 16, 17, 18, 19, 22, 24, 27, 32, 35, 39, 42, 49, 54, 55, 56, 76, 81, 82, 83, 84, 87, 88, 89, 90, 92, 98, 99, 100, 101, 111, 113, 116, 129, 130], "rerank_top_k": [24, 27, 32, 35, 39, 42], "reranker_max_length": [24, 27, 32, 35, 39, 42], "reranker_name_or_path": [24, 27, 32, 35, 39, 42], "rerankermodelargu": [49, 55, 73, 74, 75, 76, 80, 81, 83], "rerankermodelclass": 92, "rerankeroutput": [0, 7, 14, 19, 82], "rerpresent": 11, "res_id": [127, 132], "res_scor": [127, 132], "res_text": [127, 132], "research": [27, 35, 42, 111, 122, 129], "resid": 134, "resolut": 123, "resourc": [111, 122, 129], "respect": [105, 116], "respoect": 129, "respons": [94, 113, 134, 135, 136], "response_synthes": 136, "restart": 122, "restaur": 134, "restore_callback_states_from_checkpoint": 69, "result": [21, 22, 98, 99, 100, 101, 105, 113, 115, 116, 118, 119, 121, 123, 125, 127, 128, 129, 130, 132], "results_fold": [129, 130], "results_list": 21, "results_queu": [21, 22], "resume_from_checkpoint": 69, "retain": 116, "retreiv": 130, "retriev": [21, 24, 27, 32, 39, 42, 91, 93, 94, 96, 97, 98, 99, 100, 101, 105, 109, 111, 113, 114, 119, 121, 128, 129, 130, 135], "retrieval_task": 128, "retrieval_use_exampl": 58, "return": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 66, 70, 71, 77, 78, 82, 83, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 114, 115, 116, 118, 119, 125, 127, 130, 132, 135, 136], "return_cobert_vec": 114, "return_colbert_vec": [70, 97, 114, 116], "return_dens": [70, 97, 114, 116], "return_dict": 115, "return_embed": 70, "return_output": [13, 19], "return_spars": [70, 97, 114, 116], "return_sparse_embed": 70, "return_tensor": [10, 16, 59, 115], "revers": [105, 132], "revolution": [105, 121], "rgb": 113, "rice": 134, "rnage": 114, "rnn": 113, "robert": [105, 121], "roberta": [113, 114, 116, 132], "role": [105, 121, 134], "root": [24, 27, 32, 35, 39, 42, 45], "rough": 105, "row": 121, "ru": 35, "run": [0, 7, 8, 12, 14, 18, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 55, 57, 61, 73, 74, 75, 78, 80, 83, 93, 94, 96, 97, 105, 111, 113, 114, 115, 121, 122, 124, 125, 127, 128, 130, 135], "run_nam": 69, "runner": [1, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86], "s1": 118, "s2": 118, "s2p": 128, "s3": 118, "s_": 116, "s_dens": 116, "s_lex_10_20": 116, "s_lex_10_21": 116, "s_mul_10_20": 116, "s_mul_10_21": 116, "s_rank_10_20": 116, "s_rank_10_21": 116, "sacrific": 123, "safe": [105, 121], "sai": 123, "sake": 121, "salad": 134, "sam": [105, 121], "same": [10, 114, 115, 118, 123, 132], "same_dataset_within_batch": [15, 58, 61], "samedataset": [10, 59], "sampl": [10, 35, 39, 119, 127], "sandwich": 134, "saniti": [122, 123], "satisfactori": 125, "satisfi": [113, 122], "save": [0, 7, 8, 11, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 127, 135], "save_loc": 135, "save_merged_lora_model": [53, 58, 76, 81], "save_on_each_nod": 69, "save_only_model": 69, "save_pretrain": [0, 7, 14, 17], "save_safetensor": 69, "save_step": 69, "save_strategi": 69, "save_total_limit": 69, "scalar": 11, "scalarquant": [124, 125], "scale": [11, 42, 45, 60, 65, 70, 77, 109, 114, 123, 128, 136], "scenario": 116, "schedulertyp": 69, "scidoc": [128, 129], "scidocsrr": [45, 129], "scifact": [128, 129], "scikit": 119, "scope": [123, 132], "score": [10, 11, 17, 22, 54, 59, 60, 65, 70, 77, 82, 87, 97, 98, 99, 100, 101, 105, 113, 114, 115, 116, 118, 119, 123, 127, 128, 129, 130, 132], "scratch": 122, "script": [24, 27, 32, 35, 39, 42, 45], "se": 134, "seafood": 134, "seamlessli": 122, "search": [32, 105, 111, 113, 114, 119, 121, 123, 124, 125, 127, 132, 134], "search_result": [24, 27, 32, 35, 39, 42, 45], "search_top_k": [24, 27, 32, 35, 39, 42], "searcher": 1, "seat": 134, "second": [97, 125, 127], "section": [115, 118, 129], "see": [115, 116, 118, 121, 122, 125, 128, 132, 134, 135, 136], "seed": [10, 59, 69, 122, 123, 124], "seen": [105, 123, 124], "select": [70, 100, 121, 122, 128, 132], "self": [11, 70, 98, 99, 100, 101, 115, 116, 130], "self_distill_start_step": [69, 70], "sell": [105, 121], "semant": [105, 113, 129, 130], "sen1_vec": 113, "sen2_vec": 113, "sensit": 123, "sentenc": [21, 22, 60, 65, 70, 77, 93, 94, 96, 97, 98, 99, 100, 101, 105, 114, 116, 118, 121, 127, 129, 130, 132, 134], "sentence1": [113, 118], "sentence2": [113, 118], "sentence_1": 118, "sentence_2": 118, "sentence_3": 118, "sentence_embed": 115, "sentence_pair": [22, 97, 98, 99, 100, 101], "sentence_pooling_method": [60, 65, 69, 70, 77], "sentence_transform": [113, 128, 129, 130], "sentences_1": 116, "sentences_2": 116, "sentencesplitt": 136, "sentencetransform": [21, 22, 113, 128, 129, 130], "sentens": 118, "sep": [109, 115], "sep_token": 9, "separ": 16, "sequenti": 123, "seri": [105, 110, 113, 118, 121], "serv": [129, 130, 134], "set": [10, 11, 24, 32, 35, 39, 59, 71, 94, 114, 116, 118, 119, 123, 125, 127, 129, 130, 132, 134, 136], "set1": 118, "set2": 118, "set_exampl": [90, 94, 95], "setup": [21, 22], "sever": [21, 22, 113, 118, 123], "sh": [24, 27, 32, 35, 39, 42, 45], "shanghai": 134, "shape": [105, 113, 115, 118, 121, 125, 127, 132, 134], "shard": 122, "share": [114, 118], "she": 105, "shell": [24, 27, 32, 35, 39, 42, 45, 129, 130], "short": [114, 134], "shot": 94, "should": [10, 21, 22, 59, 118, 122, 128, 129, 130, 134], "show": [105, 118, 119, 127, 128, 129, 135], "shrink": 123, "shrip": 134, "shuffl": [10, 16], "shuffle_ratio": [9, 15, 58], "sick": 129, "sift": 125, "sift1m": 125, "sigmoid": [98, 99, 100, 101], "signal": 113, "signific": 115, "sim": 116, "sim_scor": 105, "similar": [60, 65, 70, 77, 109, 113, 114, 115, 116, 123, 124, 125, 129, 130, 132], "similarli": [113, 114], "simpl": [81, 121, 135], "simpledirectoryread": 136, "simpli": [32, 35, 39, 42, 123, 132], "simultan": 114, "sinc": [118, 127, 135], "sing": 35, "singer": [105, 121], "singl": [16, 21, 93, 94, 96, 97, 98, 99, 100, 115], "size": [10, 11, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 93, 94, 96, 97, 98, 99, 100, 101, 109, 114, 115, 118, 122, 123, 124, 129, 130, 135, 136], "skip": 122, "skip_memory_metr": 69, "sklearn": [119, 127, 132], "slight": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101, 132], "slower": [123, 132], "small": [105, 109, 113, 114, 119, 123, 125, 132], "small_threshold": [15, 58], "smaller": [114, 116, 123, 124], "so": [113, 118, 121, 123, 124, 129, 134], "soft": 134, "solv": 136, "some": [111, 113, 119, 121, 123, 127, 134], "sometim": 132, "somewhat": 125, "songwrit": [105, 121], "soon": [129, 130], "soondubu": 134, "sophist": [113, 134], "sort": [105, 132], "sorted_indic": 105, "sota": 113, "sourc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 115, 128, 135, 136], "space": [113, 121, 122, 123, 124, 127, 132, 136], "span": 114, "sparc": [70, 97, 116], "spars": [70, 71, 97, 113, 114], "sparse_scor": 70, "sparse_weight": 70, "speaker": 32, "spearman": [129, 130], "speci": 132, "special": [115, 116], "specif": [39, 98, 99, 100, 105, 114, 121, 135, 136], "specifi": [10, 21, 22, 60, 65, 70, 77, 97, 98, 99, 100, 101, 136], "speed": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101, 114, 116, 121, 123, 124, 125, 132], "spend": 118, "spici": 134, "spinach": 134, "spirit": 134, "split": [11, 24, 27, 32, 35, 39, 42, 60, 65, 70, 77, 118, 127, 130, 132, 135], "split_batch": 69, "split_docu": 135, "splitter": 135, "spread": [105, 121], "sprintduplicatequest": 129, "sqrt": 118, "st": [129, 130], "stackexchangeclust": 129, "stackexchangeclusteringp2p": 129, "stackoverflowdupquest": 129, "stage": [113, 132], "stand": [110, 114, 135, 136], "standard": [45, 128, 134], "standardgpuresourc": 122, "standout": 125, "stanford": [105, 121], "start": [21, 22, 70, 82, 119, 129, 130], "start_lay": [81, 82], "start_multi_process_pool": [0, 20, 21, 22], "state": [10, 60, 65, 70, 77, 91, 96, 97, 115, 116], "static": [10, 11, 21, 22, 71, 94], "statist": 113, "steak": 134, "steakhous": 134, "step": [69, 70, 113, 116, 118, 119, 122, 124, 129, 132, 134, 135], "stew": 134, "still": [105, 109, 125], "stop": [21, 22, 111], "stop_multi_process_pool": [0, 20, 21, 22], "storag": 136, "storage_context": 136, "storagecontext": 136, "store": [71, 121, 122, 123, 124, 127, 128, 129, 130, 132, 136], "str": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 115, 130], "straightforward": 135, "stream": 136, "string": [21, 22], "strong": 132, "structur": [35, 115, 123, 130, 136], "sts12": 129, "sts13": 129, "sts14": 129, "sts15": 129, "sts16": 129, "sts17": 129, "sts22": 129, "stsb": 130, "stsbenchmark": 129, "student": 11, "student_scor": 11, "sub": [11, 60, 65, 70, 77, 124], "sub_batch_s": [10, 11, 59, 60, 65, 69, 70, 77], "subclass": [13, 19], "subquant": 124, "subsequ": 113, "subset": 128, "subtract": 118, "successfulli": 128, "suffer": [113, 123], "suffix": 94, "suggest": [125, 132, 134], "suitabl": 132, "sum": [115, 118, 127, 132], "sum_": [116, 118, 119, 127], "summar": 129, "summari": 129, "summat": 116, "summev": 129, "sunni": [113, 132], "super": [105, 121], "support": [11, 61, 98, 99, 100, 113, 114, 115, 116, 122, 123, 128, 129, 136], "suppos": [119, 134], "sure": [113, 115, 121, 122, 136], "surfac": 123, "surpris": 32, "surprisingli": 105, "sushi": 134, "sw": 32, "swift": [105, 121], "sy": [122, 125], "system": [105, 119, 122, 123, 124, 125, 127, 132, 134], "systemat": 113, "szechuan": 134, "t": [11, 35, 105, 113, 114, 115, 116, 118, 119, 121, 127, 129, 132], "t2rerank": 130, "t2retriev": 130, "tabl": 132, "takayama": 134, "take": [10, 105, 113, 118, 128, 129, 132], "tanh": [115, 116], "target": [11, 17, 21, 22, 60, 65, 70, 77], "target_devic": [21, 22], "target_modul": [53, 58, 76, 81], "task": [10, 21, 45, 91, 93, 94, 96, 97, 98, 99, 100, 101, 105, 113, 114, 119, 127, 128, 129, 130, 136], "task_lang": 129, "task_list_clust": 129, "task_nam": 128, "task_typ": 24, "tast": 134, "taylor": [105, 121], "te": 32, "tea": 134, "teach": 111, "teacher": [10, 11, 17, 59, 70, 82], "teacher_scor": [11, 17, 70, 82], "teacher_target": 11, "teatur": [17, 82], "techniqu": [111, 113, 123, 134, 136], "tell": [118, 127], "temp_dataset": 10, "temperatur": [11, 60, 65, 69, 70, 77], "templat": [21, 22, 91, 93, 94, 96, 97, 98, 99, 100, 101, 135, 136], "temporari": 122, "tensor": [11, 13, 17, 19, 21, 54, 56, 60, 62, 65, 67, 70, 72, 77, 79, 82, 84, 87, 89, 91, 93, 94, 96, 97, 115, 118, 130], "term": 116, "terribl": 123, "test": [24, 27, 35, 39, 114, 125, 128, 129, 130], "text": [10, 16, 21, 22, 35, 39, 45, 54, 70, 82, 87, 94, 109, 113, 114, 116, 119, 124, 127, 128, 129, 130, 132], "text_input": 70, "text_qa_templ": 136, "text_splitt": 135, "textbf": [119, 127], "textual": [129, 130], "tf": 113, "tf32": 69, "th": [32, 116, 119, 127], "thai": 134, "than": [105, 113, 114, 118, 125], "thei": [32, 109, 113, 115, 119, 122, 127, 129], "them": [39, 105, 113, 115, 116, 118, 121, 122, 123, 124, 135], "theme": 134, "themselv": 134, "therefor": 115, "theta": 118, "thi": [10, 21, 22, 24, 59, 105, 111, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "thing": 135, "those": [105, 123], "thousand": 121, "three": [70, 113, 114, 122, 127], "thrid": 127, "through": [114, 115, 121, 122, 123, 127, 129, 130, 132, 136], "thu": [105, 118, 123, 124, 125, 132, 135], "thunewsclusteringp2p": 130, "thunewsclusterings2": 130, "tiger": 132, "tigri": 132, "time": [105, 109, 113, 116, 119, 121, 122, 123, 125, 127, 129, 130, 132], "tini": [105, 121, 125], "tip": 111, "tnew": 130, "todai": [113, 132], "tofu": 134, "togeth": [21, 22, 115], "token": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 93, 94, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 130], "token_type_embed": [115, 116], "token_type_id": 115, "tokenizer_nam": [9, 15, 53, 58, 69, 76, 81], "tokenzi": 59, "tom": 134, "tonight": 118, "too": 123, "tool": 114, "toolkit": 111, "top": [119, 124, 127, 129, 130, 132, 136], "topic": [32, 111], "torch": [11, 13, 17, 19, 21, 54, 60, 65, 70, 77, 87, 91, 93, 94, 96, 97, 115, 116, 118], "torch_compil": 69, "torch_compile_backend": 69, "torch_compile_mod": 69, "torch_empty_cache_step": 69, "torchdynamo": 69, "total": [10, 59, 119, 121, 122, 125, 127, 132], "totoal": 119, "touche2020": [128, 129], "toxicconversationsclassif": 129, "tpu_metrics_debug": 69, "tpu_num_cor": 69, "tqdm": [127, 132], "tradeoff": [125, 132], "tradit": [113, 134], "train": [10, 11, 12, 13, 16, 17, 18, 19, 24, 32, 39, 54, 60, 61, 65, 69, 70, 71, 77, 82, 87, 113, 115, 121, 123, 124, 125, 127, 129, 130, 132, 135], "train_batch_s": [17, 54, 82, 87], "train_data": [9, 15, 58], "train_dataset": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "train_group_s": [9, 15, 58], "trainer": [12, 13, 18, 19, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "trainer_util": 69, "trainercallback": [13, 19, 56, 62, 67, 72, 79, 84, 89], "trainercontrol": 10, "trainerst": 10, "training_arg": [10, 12, 18, 55, 59, 61, 66, 69, 71, 78, 83, 88], "trainingargu": [13, 19, 56, 62, 67, 72, 79, 84, 89], "transform": [21, 22, 69, 115, 116, 123, 124], "transpar": 113, "treccovid": [128, 129], "tri": [21, 22, 71, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101], "true": [10, 11, 13, 16, 19, 21, 22, 27, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 113, 114, 115, 116, 118, 119, 121, 127, 132, 134, 135], "truncat": [115, 127], "trust_remote_cod": [9, 15, 53, 58, 69, 71, 76, 81, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101], "truth": [105, 119, 125, 127, 132], "try": [123, 127, 132], "tune": [12, 18, 114, 129], "tup": 132, "tupl": [12, 13, 16, 18, 19, 22, 55, 56, 61, 62, 66, 67, 71, 72, 78, 79, 83, 84, 88, 89, 97, 98, 99, 100, 101], "ture": [105, 121], "tutori": [105, 111, 119, 121, 122, 123, 125, 127, 128, 129, 130, 132, 134, 135, 136], "tweetsentimentextractionclassif": 129, "twentynewsgroupsclust": 129, "twittersemeval2015": 129, "twitterurlcorpu": 129, "two": [24, 97, 113, 115, 116, 118, 119, 122, 123, 125, 127], "type": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 35, 53, 54, 55, 58, 59, 60, 61, 65, 66, 69, 70, 71, 76, 77, 78, 81, 82, 83, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 118, 121, 124, 127, 132, 136], "typic": [134, 135], "typolog": [35, 39], "u": [104, 105, 113, 114, 115, 116, 118, 121, 125, 127, 132, 134, 135, 136], "u270": 134, "uncom": [121, 127], "under": 136, "underli": [54, 82, 87], "unfamiliar": 111, "unifi": 114, "unified_finetun": [69, 70], "union": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 118], "univers": [105, 121], "unsqueez": 115, "unsupport": 21, "up": [21, 22, 91, 92, 93, 96, 97, 98, 99, 100, 101, 114, 116, 123, 129, 132, 134], "updat": [24, 121, 122, 129], "update_prompt": 136, "upon": [105, 121], "uptown": 134, "urllib": 125, "urlretriev": 125, "us": [10, 11, 16, 17, 21, 22, 27, 39, 42, 54, 59, 60, 65, 70, 71, 77, 82, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 113, 114, 115, 116, 118, 119, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "usag": [113, 114, 121, 122, 123, 124, 125, 128, 135], "use_bf16": [98, 99, 100], "use_cpu": 69, "use_dataload": [98, 99], "use_flash_attn": [53, 58, 76, 81], "use_fp16": [21, 22, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 114, 116, 118, 121, 127, 132, 134], "use_ipex": 69, "use_legacy_prediction_loop": 69, "use_lora": [53, 58, 76, 81], "use_mps_devic": 69, "use_self_distil": [69, 70], "use_slow_token": [53, 58], "user": [122, 125, 134, 136], "user_input": 134, "usual": [119, 124, 132], "util": 116, "v": [116, 129, 130], "v1": [27, 42, 45, 105, 113, 115, 118, 121, 127, 128, 129, 130, 132, 134, 135, 136], "v2": [24, 27, 32, 35, 39, 42, 113, 130, 132], "valu": [11, 17, 60, 65, 70, 77, 114, 115, 116, 118, 119, 123], "valueerror": [10, 11, 16, 21, 22, 70, 91, 92], "var": [91, 92], "vari": 116, "variabl": [129, 130], "varieti": [45, 128, 134], "variou": [45, 113, 128], "vdev": 122, "ve": [105, 118, 128, 130], "vector": [21, 60, 65, 70, 77, 91, 93, 94, 96, 97, 105, 109, 113, 114, 115, 118, 121, 122, 123, 124, 125, 127, 132, 134, 135, 136], "vector_stor": 136, "vectordb": 135, "vectorstor": 135, "vectorstoreindex": 136, "veget": 134, "verb": 118, "veri": [105, 113, 114, 118, 121, 122, 123, 125, 129, 135, 136], "versatil": [105, 114, 121, 135], "version": [24, 109, 114, 116, 122, 129, 135], "via": [21, 22, 105, 116, 121], "videoretriev": 130, "vietnam": 134, "vietnames": 134, "view": 118, "virtual": [121, 122], "vision": [105, 121], "visit": [111, 123], "vo": 113, "voic": [105, 121], "voronoi": 123, "voyage_api_kei": 113, "voyageai": 113, "vram": 122, "vre": 122, "w_": 116, "w_1": 116, "w_2": 116, "w_3": 116, "wa": [105, 109, 121], "wai": [70, 97, 105, 113, 118, 122, 123, 124], "waimai": 130, "wait": 129, "walk": [114, 127], "wall": [122, 125], "want": [21, 22, 104, 105, 111, 121, 123, 127, 129, 134, 135, 136], "warmup_ratio": 69, "warmup_step": 69, "warn": 69, "watch": [113, 118], "wave": 113, "we": [39, 105, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "websit": 130, "weight": [70, 97, 100, 114, 116], "weight_decai": 69, "weights_for_different_mod": 97, "welcom": 111, "well": [45, 105, 109, 119, 123, 128, 132, 134, 135, 136], "went": 122, "were": [109, 113], "what": [105, 114, 116, 118, 123, 132, 135, 136], "when": [11, 22, 71, 93, 94, 96, 97, 119, 122, 123, 124, 125, 127, 129, 136], "where": [116, 119, 121, 123, 127, 134, 135], "whether": [119, 122], "which": [11, 21, 22, 45, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 105, 109, 110, 114, 116, 118, 119, 121, 123, 128, 129, 130, 132, 134, 135, 136], "while": [105, 113, 118, 122, 123, 136], "who": [32, 35, 105, 121], "whole": [45, 115, 121, 123, 127, 128, 129, 135], "why": [123, 125], "wide": [27, 42, 45, 105, 119, 123, 125, 127, 128, 129], "wikipedia": 39, "wikipeida": 39, "win": [105, 121], "wine": 134, "within": [113, 116, 119, 129, 130, 136], "without": [104, 109, 114, 123, 134, 135], "won": 105, "wonder": [118, 134], "wood": 134, "word": [113, 116, 127], "word2vec": 113, "word_embed": [115, 116], "work": [21, 22, 105, 114, 121, 123, 132], "worker": [98, 99], "world": [42, 45, 123, 128, 136], "would": [113, 127, 128, 135, 136], "wrapper": 16, "write": [119, 135], "write_index": [121, 127], "written": 129, "wrote": 115, "wsdm": 32, "wudao": 39, "x": [24, 27, 32, 35, 39, 42, 45, 115, 116], "x86_64": [122, 123, 124, 125], "xlm": [114, 116, 132], "xlmrobertaattent": 116, "xlmrobertaembed": 116, "xlmrobertaencod": 116, "xlmrobertaintermedi": 116, "xlmrobertalay": 116, "xlmrobertamodel": 116, "xlmrobertaoutput": 116, "xlmrobertapool": 116, "xlmrobertaselfattent": 116, "xlmrobertaselfoutput": 116, "yi": 134, "yichiran": 134, "yo": 32, "york": 134, "you": [21, 22, 24, 27, 32, 35, 39, 42, 45, 98, 99, 100, 104, 111, 113, 114, 115, 116, 118, 121, 122, 125, 127, 128, 129, 130, 132, 134, 135, 136], "your": [24, 27, 32, 35, 39, 42, 45, 113, 114, 115, 116, 121, 122, 125, 127, 128, 129, 130, 134, 135, 136], "your_api_kei": [113, 134, 135, 136], "your_existing_readm": 129, "yum": 134, "zero": [119, 127, 132], "zh": [39, 109, 114, 130], "zh_cn": 35, "zh_result": 130, "zip": [105, 118, 119, 122, 127, 132], "\u0434\u044d\u0439\u0432": 35, "\u043a\u0442\u043e": 35, "\u043f\u043e\u0435\u0442": 35, "\u044d\u0434\u043c\u0443\u043d\u0434\u0441": 35, "\u306f\u8ab0\u304c\u6b4c\u3063\u3066\u3044\u307e\u3059\u304b": 35, "\u30a8\u30c9\u30e2\u30f3\u30ba": 35, "\u30c7\u30a4\u30d6": 35, "\u30c7\u30a4\u30f4": 35, "\u30c7\u30fc\u30d6": 35, "\u4e3a\u8fd9\u4e2a\u53e5\u5b50\u751f\u6210\u8868\u793a\u4ee5\u7528\u4e8e\u68c0\u7d22\u76f8\u5173\u6587\u7ae0": 130, "\u57c3\u5fb7\u8499\u5179": 35, "\u6234\u7ef4": 35, "\u662f\u8c01\u6f14\u5531\u7684": 35}, "titles": ["Abstract Class", "Evaluation", "Arguments", "dataset loader", "Evaluator", "runner", "searcher", "Finetune", "Embedder", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Reranker", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Inference", "AbsEmbedder", "AbsReranker", "Evaluation", "AIR-Bench", "arguments", "runner", "BEIR", "arguments", "data loader", "evaluator", "runner", "MIRACL", "data_loader", "runner", "MKQA", "data_loader", "evaluator", "runner", "MLDR", "data_loader", "runner", "MSMARCO", "data_loader", "runner", "MTEB", "arguments", "runner", "searcher", "Finetune", "Embedder", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "ICL", "Arguments", "Dataset", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "M3", "Arguments", "Modeling", "Runner", "Trainer", "Reranker", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "Layerwise", "Arguments", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "Inference", "FlagAutoModel", "FlagAutoReranker", "BaseEmbedder", "ICLLLMEmbedder", "Embedder", "BaseEmbedder", "M3Embedder", "BaseLLMReranker", "LayerWiseLLMReranker", "LightweightLLMReranker", "BaseReranker", "Reranker", "&lt;no title&gt;", "Installation", "Quick Start", "BGE-en-icl", "BGE-M3", "BGE-Reranker", "BGE-v1", "Introduction", "BAAI General Embedding", "1. Embedding", "Intro to Embedding", "BGE Series", "BGE Explanation", "BGE-M3", "2. Metrics", "Similarity", "Evaluation Metrics", "3. Indexing", "Indexing Using Faiss", "Faiss GPU", "Faiss Indexes", "Faiss Quantizers", "Choosing Index", "4. Evaluation", "Evaluation", "MTEB", "MTEB Leaderboard", "C-MTEB", "5. Reranking", "Reranker", "6. RAG", "Simple RAG From Scratch", "RAG with LangChain", "RAG with LlamaIndex"], "titleterms": {"0": [105, 115, 116, 119, 121, 125, 127, 128, 129, 130, 132, 134, 135, 136], "1": [105, 112, 113, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136], "2": [105, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 129, 130, 132, 134, 135, 136], "3": [105, 114, 116, 118, 119, 120, 121, 122, 123, 125, 127, 129, 130, 132, 134, 135, 136], "4": [105, 114, 116, 118, 119, 121, 122, 123, 125, 126, 127, 129, 130, 132], "5": [109, 114, 118, 119, 121, 122, 125, 127, 131, 132], "6": [125, 132, 133], "absargu": [9, 15], "absdataset": [10, 16], "absembedd": 21, "absembeddercol": 10, "absembeddermodel": 11, "absembeddersamedatasetcol": [10, 59], "absembeddersamedatasettraindataset": 10, "absembeddertrain": [12, 13], "absembeddertraindataset": 10, "absllmrerankercol": 16, "absllmrerankertraindataset": 16, "absmodel": [11, 17], "absrerank": 22, "absrerankercol": 16, "absrerankermodel": 17, "absrerankertrain": [18, 19], "absrerankertraindataset": 16, "absrunn": [12, 18], "abstract": 0, "abstrain": [13, 19], "ai": 113, "air": 24, "all": 122, "answer": 121, "approach": 118, "argument": [2, 25, 28, 46, 53, 58, 69, 76, 81], "avail": 122, "baai": [111, 114], "background": 113, "base": [52, 64, 75, 86], "baseembedd": [93, 96], "basellmrerank": 98, "basererank": 101, "beir": 27, "bench": 24, "bge": [106, 107, 108, 109, 113, 114, 115, 116], "build": 122, "c": 130, "calcul": 105, "call": 118, "choos": 125, "class": 0, "commerci": 113, "comparison": 115, "cosin": 118, "cpu": [121, 122], "creat": 122, "data": [29, 122, 134, 135, 136], "data_load": [33, 36, 40, 43], "dataset": [3, 59, 121, 125, 127, 130, 132], "decod": [51, 74], "decoderonlyembeddericlsamedatasettraindataset": 59, "dens": 116, "distanc": 118, "dot": 118, "embed": [105, 111, 112, 113, 114, 121, 127, 132], "embedd": [8, 50, 95, 114], "embedderoutput": 11, "embeddertrainercallbackfordatarefresh": 10, "en": 106, "encod": [63, 85, 115], "encoderonlyembedderm3model": 70, "encoderonlyembedderm3modelforinfer": 70, "euclidean": 118, "evaldenseretriev": 6, "evalrerank": 6, "evalretriev": 6, "evalu": [1, 4, 23, 30, 37, 105, 119, 126, 127, 129, 130, 132], "exampl": [118, 123], "explan": 115, "faiss": [121, 122, 123, 124], "find": 121, "finetun": [7, 49], "flagautomodel": 91, "flagautorerank": 92, "flat": 125, "from": [104, 134], "function": [116, 118, 125], "futur": 129, "gener": [111, 114, 134, 135, 136], "get": 113, "gpu": [121, 122], "helper": 125, "hnsw": 125, "hybrid": 116, "icl": [57, 106], "iclllmembedd": 94, "implement": 118, "index": [120, 121, 122, 123, 124, 125, 127, 132, 134, 135, 136], "indexflat": 123, "indexhnsw": 123, "indexivf": 123, "indexlsh": 123, "infer": [20, 90], "inner": 118, "instal": [104, 115, 116, 122, 128, 129, 130], "intro": [113, 123, 128], "introduct": 110, "ivf": [124, 125], "jaccard": 118, "langchain": 135, "layerwis": 80, "layerwisellmrerank": 99, "leaderboard": [129, 130], "lightweightllmrerank": 100, "linux": 121, "llamaindex": 136, "llm": 114, "load": 127, "loader": [3, 29], "lsh": 125, "m3": [68, 107, 114, 116], "m3embedd": 97, "map": 119, "maximum": 118, "method": [3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 33, 36, 40, 43, 54, 59, 60, 65, 70, 77, 82, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101], "metric": [117, 119], "miracl": 32, "mkqa": 35, "mldr": 39, "model": [54, 60, 65, 70, 77, 82, 87, 113, 114, 130], "mrr": [119, 127, 132], "msmarco": 42, "mteb": [45, 128, 129, 130], "multi": 116, "multipl": 122, "naiv": 118, "ndcg": [119, 127, 132], "onli": [51, 63, 74, 85], "open": 113, "openai": 113, "option": [121, 122], "packag": 125, "partial": 129, "pip": 104, "precis": 119, "prepar": [105, 119, 122, 123, 124, 125, 134, 135, 136], "product": [118, 124, 125], "pytorch": 118, "quantiz": [124, 125], "queri": 121, "quick": 105, "rag": [133, 134, 135, 136], "rank": [105, 116], "recal": [119, 127, 132], "relationship": 118, "rerank": [14, 73, 102, 108, 131, 132], "rerankeroutput": 17, "result": 122, "retreiv": 135, "retriev": [116, 127, 132, 134, 136], "run": 129, "runner": [5, 26, 31, 34, 38, 41, 44, 47, 55, 61, 66, 71, 78, 83, 88], "save": 121, "scalar": [124, 125], "scratch": 134, "search": [118, 122], "searcher": [6, 48], "sentenc": [113, 115], "seri": 114, "setup": [121, 127, 132], "shortag": 123, "similar": [105, 118], "simpl": 134, "singl": 122, "sourc": [104, 113], "spars": 116, "start": 105, "step": [105, 121, 127], "structur": 116, "submit": [129, 130], "text": [105, 121], "tradeoff": 123, "trainer": [56, 62, 67, 72, 79, 84, 89], "transform": 113, "us": [104, 121], "v1": [109, 114], "vector": 116, "voyag": 113, "work": 129, "x86_64": 121}})